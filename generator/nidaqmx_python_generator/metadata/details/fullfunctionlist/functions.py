functions = {
    'AddCDAQSyncConnection': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'portList',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'AddGlobalChansToTask': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channelNames',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'AddNetworkDevice': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'ipAddress',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'attemptReservation',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'out',
                'name': 'deviceNameOut',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'deviceNameOutBufferSize'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'deviceNameOutBufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'AreConfiguredCDAQSyncPortsDisconnected': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'chassisDevicesPorts',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'out',
                'name': 'disconnectedPortsExist',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'AutoConfigureCDAQSyncConnections': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'chassisDevicesPorts',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'CalculateReversePolyCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'forwardCoeffs',
                'size': {
                    'mechanism': 'len',
                    'value': 'numForwardCoeffsIn'
                },
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'name': 'numForwardCoeffsIn',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'name': 'minValX',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxValX',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'numPointsToCompute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'reversePolyOrder',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'reverseCoeffs',
                'size': {
                    'mechanism': 'custom-code',
                    'value': '(reversePolyOrder < 0) ? numForwardCoeffsIn : reversePolyOrder + 1'
                },
                'type': 'float64[]'
            }
        ],
        'returns': 'int32'
    },
    'CfgAnlgEdgeRefTrig': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'triggerSource',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Slope1',
                'name': 'triggerSlope',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'triggerLevel',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'pretriggerSamples',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'CfgAnlgEdgeStartTrig': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'triggerSource',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Slope1',
                'name': 'triggerSlope',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'triggerLevel',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'CfgAnlgMultiEdgeRefTrig': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'triggerSources',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'triggerSlopeArray',
                'size': {
                    'mechanism': 'len',
                    'value': 'arraySize'
                },
                'type': 'const int32[]'
            },
            {
                'direction': 'in',
                'name': 'triggerLevelArray',
                'size': {
                    'mechanism': 'len',
                    'value': 'arraySize'
                },
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'name': 'pretriggerSamples',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'name': 'arraySize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'CfgAnlgMultiEdgeStartTrig': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'triggerSources',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'triggerSlopeArray',
                'size': {
                    'mechanism': 'len',
                    'value': 'arraySize'
                },
                'type': 'const int32[]'
            },
            {
                'direction': 'in',
                'name': 'triggerLevelArray',
                'size': {
                    'mechanism': 'len',
                    'value': 'arraySize'
                },
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'name': 'arraySize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'CfgAnlgWindowRefTrig': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'triggerSource',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'WindowTriggerCondition1',
                'name': 'triggerWhen',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'windowTop',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'windowBottom',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'pretriggerSamples',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'CfgAnlgWindowStartTrig': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'triggerSource',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'WindowTriggerCondition1',
                'name': 'triggerWhen',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'windowTop',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'windowBottom',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'CfgBurstHandshakingTimingExportClock': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'AcquisitionType',
                'name': 'sampleMode',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'sampsPerChan',
                'type': 'uInt64'
            },
            {
                'direction': 'in',
                'name': 'sampleClkRate',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'sampleClkOutpTerm',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Polarity2',
                'name': 'sampleClkPulsePolarity',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'Level1',
                'name': 'pauseWhen',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'Polarity2',
                'name': 'readyEventActiveLevel',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'CfgBurstHandshakingTimingImportClock': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'AcquisitionType',
                'name': 'sampleMode',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'sampsPerChan',
                'type': 'uInt64'
            },
            {
                'direction': 'in',
                'name': 'sampleClkRate',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'sampleClkSrc',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'sampleClkActiveEdge',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'Level1',
                'name': 'pauseWhen',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'Polarity2',
                'name': 'readyEventActiveLevel',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'CfgChangeDetectionTiming': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'risingEdgeChan',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'fallingEdgeChan',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'AcquisitionType',
                'name': 'sampleMode',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'sampsPerChan',
                'type': 'uInt64'
            }
        ],
        'returns': 'int32'
    },
    'CfgDigEdgeRefTrig': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'triggerSource',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'triggerEdge',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'pretriggerSamples',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'CfgDigEdgeStartTrig': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'triggerSource',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'triggerEdge',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'CfgDigPatternRefTrig': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'triggerSource',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'triggerPattern',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'DigitalPatternCondition1',
                'name': 'triggerWhen',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'pretriggerSamples',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'CfgDigPatternStartTrig': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'triggerSource',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'triggerPattern',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'DigitalPatternCondition1',
                'name': 'triggerWhen',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'CfgHandshakingTiming': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'AcquisitionType',
                'name': 'sampleMode',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'sampsPerChan',
                'type': 'uInt64'
            }
        ],
        'returns': 'int32'
    },
    'CfgImplicitTiming': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'AcquisitionType',
                'name': 'sampleMode',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'sampsPerChan',
                'type': 'uInt64'
            }
        ],
        'returns': 'int32'
    },
    'CfgInputBuffer': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'CfgOutputBuffer': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'CfgPipelinedSampClkTiming': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'source',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'rate',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'activeEdge',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'AcquisitionType',
                'name': 'sampleMode',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'sampsPerChan',
                'type': 'uInt64'
            }
        ],
        'returns': 'int32'
    },
    'CfgSampClkTiming': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'source',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'rate',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'activeEdge',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'AcquisitionType',
                'name': 'sampleMode',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'sampsPerChan',
                'type': 'uInt64'
            }
        ],
        'returns': 'int32'
    },
    'CfgTimeStartTrig': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'when',
                'type': 'CVIAbsoluteTime'
            },
            {
                'direction': 'in',
                'enum': 'Timescale2',
                'name': 'timescale',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'CfgWatchdogAOExpirStates': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channelNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'expirStateArray',
                'size': {
                    'mechanism': 'len',
                    'value': 'arraySize'
                },
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'enum': 'WatchdogAOOutputType',
                'name': 'outputTypeArray',
                'size': {
                    'mechanism': 'len',
                    'value': 'arraySize'
                },
                'type': 'const int32[]'
            },
            {
                'direction': 'in',
                'name': 'arraySize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'CfgWatchdogCOExpirStates': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channelNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'WatchdogCOExpirState',
                'name': 'expirStateArray',
                'size': {
                    'mechanism': 'len',
                    'value': 'arraySize'
                },
                'type': 'const int32[]'
            },
            {
                'direction': 'in',
                'name': 'arraySize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'CfgWatchdogDOExpirStates': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channelNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'DigitalLineState',
                'name': 'expirStateArray',
                'size': {
                    'mechanism': 'len',
                    'value': 'arraySize'
                },
                'type': 'const int32[]'
            },
            {
                'direction': 'in',
                'name': 'arraySize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'ChangeExtCalPassword': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'password',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'newPassword',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ClearTEDS': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ClearTask': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ConfigureLogging': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'filePath',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LoggingMode',
                'name': 'loggingMode',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'groupName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LoggingOperation',
                'name': 'operation',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'ConfigureTEDS': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'filePath',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ConnectTerms': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'sourceTerminal',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'destinationTerminal',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InvertPolarity',
                'name': 'signalModifiers',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'ControlWatchdogTask': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'WatchdogControlAction',
                'name': 'action',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIAccel4WireDCVoltageChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfgWithDefault',
                'name': 'terminalConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'AccelUnits2',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'sensitivity',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'AccelSensitivityUnits1',
                'name': 'sensitivityUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'useExcitForScaling',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIAccelChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfgWithDefault',
                'name': 'terminalConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'AccelUnits2',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'sensitivity',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'AccelSensitivityUnits1',
                'name': 'sensitivityUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'currentExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'currentExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIAccelChargeChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfgWithDefault',
                'name': 'terminalConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'AccelUnits2',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'sensitivity',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'AccelChargeSensitivityUnits',
                'name': 'sensitivityUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIBridgeChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'BridgeUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'BridgeConfiguration1',
                'name': 'bridgeConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'nominalBridgeResistance',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIChargeChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfgWithDefault',
                'name': 'terminalConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'ChargeUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAICurrentChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfgWithDefault',
                'name': 'terminalConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'CurrentUnits2',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'CurrentShuntResistorLocationWithDefault',
                'name': 'shuntResistorLoc',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'extShuntResistorVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAICurrentRMSChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfgWithDefault',
                'name': 'terminalConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'CurrentUnits2',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'CurrentShuntResistorLocationWithDefault',
                'name': 'shuntResistorLoc',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'extShuntResistorVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIForceBridgePolynomialChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'ForceUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'BridgeConfiguration1',
                'name': 'bridgeConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'nominalBridgeResistance',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'forwardCoeffs',
                'size': {
                    'mechanism': 'len',
                    'value': 'numForwardCoeffs'
                },
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'name': 'numForwardCoeffs',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'name': 'reverseCoeffs',
                'size': {
                    'mechanism': 'len',
                    'value': 'numReverseCoeffs'
                },
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'name': 'numReverseCoeffs',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'enum': 'BridgeElectricalUnits',
                'name': 'electricalUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'BridgePhysicalUnits',
                'name': 'physicalUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIForceBridgeTableChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'ForceUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'BridgeConfiguration1',
                'name': 'bridgeConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'nominalBridgeResistance',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'electricalVals',
                'size': {
                    'mechanism': 'len',
                    'value': 'numElectricalVals'
                },
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'name': 'numElectricalVals',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'enum': 'BridgeElectricalUnits',
                'name': 'electricalUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'physicalVals',
                'size': {
                    'mechanism': 'len',
                    'value': 'numPhysicalVals'
                },
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'name': 'numPhysicalVals',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'enum': 'BridgePhysicalUnits',
                'name': 'physicalUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIForceBridgeTwoPointLinChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'ForceUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'BridgeConfiguration1',
                'name': 'bridgeConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'nominalBridgeResistance',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'firstElectricalVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'secondElectricalVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'BridgeElectricalUnits',
                'name': 'electricalUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'firstPhysicalVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'secondPhysicalVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'BridgePhysicalUnits',
                'name': 'physicalUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIForceIEPEChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfgWithDefault',
                'name': 'terminalConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'ForceIEPEUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'sensitivity',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'ForceIEPESensorSensitivityUnits',
                'name': 'sensitivityUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'currentExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'currentExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIFreqVoltageChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'FrequencyUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'thresholdLevel',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'hysteresis',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIMicrophoneChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfgWithDefault',
                'name': 'terminalConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'SoundPressureUnits1',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'micSensitivity',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxSndPressLevel',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'currentExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'currentExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIPosEddyCurrProxProbeChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'LengthUnits2',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'sensitivity',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'EddyCurrentProxProbeSensitivityUnits',
                'name': 'sensitivityUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIPosLVDTChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'LengthUnits2',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'sensitivity',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'LVDTSensitivityUnits1',
                'name': 'sensitivityUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitFreq',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'ACExcitWireMode',
                'name': 'acExcitWireMode',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIPosRVDTChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'AngleUnits1',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'sensitivity',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'RVDTSensitivityUnits1',
                'name': 'sensitivityUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitFreq',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'ACExcitWireMode',
                'name': 'acExcitWireMode',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIPowerChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'voltageSetpoint',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'currentSetpoint',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'outputEnable',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIPressureBridgePolynomialChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'PressureUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'BridgeConfiguration1',
                'name': 'bridgeConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'nominalBridgeResistance',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'forwardCoeffs',
                'size': {
                    'mechanism': 'len',
                    'value': 'numForwardCoeffs'
                },
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'name': 'numForwardCoeffs',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'name': 'reverseCoeffs',
                'size': {
                    'mechanism': 'len',
                    'value': 'numReverseCoeffs'
                },
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'name': 'numReverseCoeffs',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'enum': 'BridgeElectricalUnits',
                'name': 'electricalUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'BridgePhysicalUnits',
                'name': 'physicalUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIPressureBridgeTableChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'PressureUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'BridgeConfiguration1',
                'name': 'bridgeConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'nominalBridgeResistance',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'electricalVals',
                'size': {
                    'mechanism': 'len',
                    'value': 'numElectricalVals'
                },
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'name': 'numElectricalVals',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'enum': 'BridgeElectricalUnits',
                'name': 'electricalUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'physicalVals',
                'size': {
                    'mechanism': 'len',
                    'value': 'numPhysicalVals'
                },
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'name': 'numPhysicalVals',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'enum': 'BridgePhysicalUnits',
                'name': 'physicalUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIPressureBridgeTwoPointLinChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'PressureUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'BridgeConfiguration1',
                'name': 'bridgeConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'nominalBridgeResistance',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'firstElectricalVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'secondElectricalVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'BridgeElectricalUnits',
                'name': 'electricalUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'firstPhysicalVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'secondPhysicalVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'BridgePhysicalUnits',
                'name': 'physicalUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIRTDChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'TemperatureUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'RTDType1',
                'name': 'rtdType',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ResistanceConfiguration',
                'name': 'resistanceConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'currentExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'currentExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'r0',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIResistanceChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'ResistanceUnits2',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ResistanceConfiguration',
                'name': 'resistanceConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'currentExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'currentExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIRosetteStrainGageChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'StrainGageRosetteType',
                'name': 'rosetteType',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'gageOrientation',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'rosetteMeasTypes',
                'size': {
                    'mechanism': 'len',
                    'value': 'numRosetteMeasTypes'
                },
                'type': 'const int32[]'
            },
            {
                'direction': 'in',
                'name': 'numRosetteMeasTypes',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'enum': 'StrainGageBridgeType1',
                'name': 'strainConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'gageFactor',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'nominalGageResistance',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'poissonRatio',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'leadWireResistance',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIStrainGageChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'StrainUnits1',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'StrainGageBridgeType1',
                'name': 'strainConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'gageFactor',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'initialBridgeVoltage',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'nominalGageResistance',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'poissonRatio',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'leadWireResistance',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAITempBuiltInSensorChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'TemperatureUnits',
                'name': 'units',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIThrmcplChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'TemperatureUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ThermocoupleType1',
                'name': 'thermocoupleType',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'CJCSource1',
                'name': 'cjcSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'cjcVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'cjcChannel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIThrmstrChanIex': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'TemperatureUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ResistanceConfiguration',
                'name': 'resistanceConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'currentExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'currentExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'a',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'b',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'c',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIThrmstrChanVex': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'TemperatureUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ResistanceConfiguration',
                'name': 'resistanceConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'a',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'b',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'c',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'r1',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'CreateAITorqueBridgePolynomialChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'TorqueUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'BridgeConfiguration1',
                'name': 'bridgeConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'nominalBridgeResistance',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'forwardCoeffs',
                'size': {
                    'mechanism': 'len',
                    'value': 'numForwardCoeffs'
                },
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'name': 'numForwardCoeffs',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'name': 'reverseCoeffs',
                'size': {
                    'mechanism': 'len',
                    'value': 'numReverseCoeffs'
                },
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'name': 'numReverseCoeffs',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'enum': 'BridgeElectricalUnits',
                'name': 'electricalUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'BridgePhysicalUnits',
                'name': 'physicalUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAITorqueBridgeTableChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'TorqueUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'BridgeConfiguration1',
                'name': 'bridgeConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'nominalBridgeResistance',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'electricalVals',
                'size': {
                    'mechanism': 'len',
                    'value': 'numElectricalVals'
                },
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'name': 'numElectricalVals',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'enum': 'BridgeElectricalUnits',
                'name': 'electricalUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'physicalVals',
                'size': {
                    'mechanism': 'len',
                    'value': 'numPhysicalVals'
                },
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'name': 'numPhysicalVals',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'enum': 'BridgePhysicalUnits',
                'name': 'physicalUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAITorqueBridgeTwoPointLinChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'TorqueUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'BridgeConfiguration1',
                'name': 'bridgeConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'nominalBridgeResistance',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'firstElectricalVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'secondElectricalVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'BridgeElectricalUnits',
                'name': 'electricalUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'firstPhysicalVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'secondPhysicalVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'BridgePhysicalUnits',
                'name': 'physicalUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIVelocityIEPEChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfgWithDefault',
                'name': 'terminalConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'VelocityUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'sensitivity',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'VelocityIEPESensorSensitivityUnits',
                'name': 'sensitivityUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'currentExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'currentExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIVoltageChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfgWithDefault',
                'name': 'terminalConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'VoltageUnits2',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIVoltageChanWithExcit': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfgWithDefault',
                'name': 'terminalConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'VoltageUnits2',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'BridgeConfiguration1',
                'name': 'bridgeConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'useExcitForScaling',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAIVoltageRMSChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfgWithDefault',
                'name': 'terminalConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'VoltageUnits2',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAOCurrentChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'CurrentUnits2',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateAOFuncGenChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'FuncGenType',
                'name': 'type',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'freq',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'amplitude',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'offset',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'CreateAOVoltageChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'VoltageUnits2',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateCIAngEncoderChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'counter',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'EncoderType2',
                'name': 'decodingType',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'zidxEnable',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'name': 'zidxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'EncoderZIndexPhase1',
                'name': 'zidxPhase',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'AngleUnits2',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'pulsesPerRev',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'name': 'initialAngle',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateCIAngVelocityChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'counter',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'EncoderType2',
                'name': 'decodingType',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'AngularVelocityUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'pulsesPerRev',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateCICountEdgesChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'counter',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'edge',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'initialCount',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'enum': 'CountDirection1',
                'name': 'countDirection',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'CreateCIDutyCycleChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'counter',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minFreq',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxFreq',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'edge',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateCIFreqChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'counter',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'FrequencyUnits3',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'edge',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'CounterFrequencyMethod',
                'name': 'measMethod',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'measTime',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'divisor',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateCIGPSTimestampChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'counter',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'TimeUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'GpsSignalType1',
                'name': 'syncMethod',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateCILinEncoderChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'counter',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'EncoderType2',
                'name': 'decodingType',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'zidxEnable',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'name': 'zidxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'EncoderZIndexPhase1',
                'name': 'zidxPhase',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'LengthUnits3',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'distPerPulse',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'initialPos',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateCILinVelocityChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'counter',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'EncoderType2',
                'name': 'decodingType',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'VelocityUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'distPerPulse',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateCIPeriodChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'counter',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'TimeUnits3',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'edge',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'CounterFrequencyMethod',
                'name': 'measMethod',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'measTime',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'divisor',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateCIPulseChanFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'counter',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'FrequencyUnits2',
                'name': 'units',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'CreateCIPulseChanTicks': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'counter',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'sourceTerminal',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'CreateCIPulseChanTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'counter',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'DigitalWidthUnits3',
                'name': 'units',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'CreateCIPulseWidthChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'counter',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'TimeUnits3',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'startingEdge',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateCISemiPeriodChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'counter',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'TimeUnits3',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateCITwoEdgeSepChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'counter',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'TimeUnits3',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'firstEdge',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'secondEdge',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateCOPulseChanFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'counter',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'FrequencyUnits2',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'Level1',
                'name': 'idleState',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'initialDelay',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'freq',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'dutyCycle',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'CreateCOPulseChanTicks': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'counter',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'sourceTerminal',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Level1',
                'name': 'idleState',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'initialDelay',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'lowTicks',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'highTicks',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'CreateCOPulseChanTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'counter',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'DigitalWidthUnits3',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'Level1',
                'name': 'idleState',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'initialDelay',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'lowTime',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'highTime',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'CreateDIChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'lines',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToLines',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LineGrouping',
                'name': 'lineGrouping',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'CreateDOChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'lines',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToLines',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LineGrouping',
                'name': 'lineGrouping',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'CreateLinScale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'name',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'slope',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'yIntercept',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'UnitsPreScaled',
                'name': 'preScaledUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'scaledUnits',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateMapScale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'name',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'prescaledMin',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'prescaledMax',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'scaledMin',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'scaledMax',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'UnitsPreScaled',
                'name': 'preScaledUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'scaledUnits',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreatePolynomialScale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'name',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'forwardCoeffs',
                'size': {
                    'mechanism': 'len',
                    'value': 'numForwardCoeffsIn'
                },
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'name': 'numForwardCoeffsIn',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'name': 'reverseCoeffs',
                'size': {
                    'mechanism': 'len',
                    'value': 'numReverseCoeffsIn'
                },
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'name': 'numReverseCoeffsIn',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'enum': 'UnitsPreScaled',
                'name': 'preScaledUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'scaledUnits',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateTEDSAIAccelChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfgWithDefault',
                'name': 'terminalConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'AccelUnits2',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'currentExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'currentExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateTEDSAIBridgeChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'TEDSUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateTEDSAICurrentChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfgWithDefault',
                'name': 'terminalConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'TEDSUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'CurrentShuntResistorLocationWithDefault',
                'name': 'shuntResistorLoc',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'extShuntResistorVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateTEDSAIForceBridgeChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'ForceUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateTEDSAIForceIEPEChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfgWithDefault',
                'name': 'terminalConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'ForceIEPEUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'currentExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'currentExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateTEDSAIMicrophoneChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfgWithDefault',
                'name': 'terminalConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'SoundPressureUnits1',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'maxSndPressLevel',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'currentExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'currentExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateTEDSAIPosLVDTChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'LengthUnits2',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitFreq',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'ACExcitWireMode',
                'name': 'acExcitWireMode',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateTEDSAIPosRVDTChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'AngleUnits1',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitFreq',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'ACExcitWireMode',
                'name': 'acExcitWireMode',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateTEDSAIPressureBridgeChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'PressureUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateTEDSAIRTDChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'TemperatureUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ResistanceConfiguration',
                'name': 'resistanceConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'currentExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'currentExcitVal',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'CreateTEDSAIResistanceChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'TEDSUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ResistanceConfiguration',
                'name': 'resistanceConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'currentExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'currentExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateTEDSAIStrainGageChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'StrainUnits1',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'initialBridgeVoltage',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'leadWireResistance',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateTEDSAIThrmcplChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'TemperatureUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'CJCSource1',
                'name': 'cjcSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'cjcVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'cjcChannel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateTEDSAIThrmstrChanIex': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'TemperatureUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ResistanceConfiguration',
                'name': 'resistanceConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'currentExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'currentExcitVal',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'CreateTEDSAIThrmstrChanVex': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'TemperatureUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ResistanceConfiguration',
                'name': 'resistanceConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'r1',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'CreateTEDSAITorqueBridgeChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'TorqueUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateTEDSAIVoltageChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfgWithDefault',
                'name': 'terminalConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'TEDSUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateTEDSAIVoltageChanWithExcit': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'nameToAssignToChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfgWithDefault',
                'name': 'terminalConfig',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'minVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'maxVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'TEDSUnits',
                'name': 'units',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'voltageExcitSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'voltageExcitVal',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'customScaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateTableScale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'name',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'prescaledVals',
                'size': {
                    'mechanism': 'len',
                    'value': 'numPrescaledValsIn'
                },
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'name': 'numPrescaledValsIn',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'name': 'scaledVals',
                'size': {
                    'mechanism': 'len',
                    'value': 'numScaledValsIn'
                },
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'name': 'numScaledValsIn',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'enum': 'UnitsPreScaled',
                'name': 'preScaledUnits',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'scaledUnits',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'CreateTask': {
        'init_method': True,
        'parameters': [
            {
                'direction': 'in',
                'is_session_name': True,
                'name': 'sessionName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'cppName': 'initializationBehavior',
                'direction': 'in',
                'grpc_type': 'nidevice_grpc.SessionInitializationBehavior',
                'name': 'initializationBehavior',
                'proto_only': True,
                'type': 'int32'
            },
            {
                'cppName': 'newSessionInitialized',
                'direction': 'out',
                'grpc_type': 'bool',
                'name': 'newSessionInitialized',
                'proto_only': True,
                'type': 'bool'
            }
        ],
        'returns': 'int32'
    },
    'CreateWatchdogTimerTask': {
        'init_method': True,
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'is_session_name': True,
                'name': 'sessionName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'include_in_proto': False,
                'name': 'lines',
                'repeating_argument': True,
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'DigitalLineState',
                'include_in_proto': False,
                'name': 'expState',
                'repeating_argument': True,
                'type': 'int32'
            },
            {
                'direction': 'in',
                'grpc_type': 'repeated WatchdogExpChannelsAndState',
                'is_compound_type': True,
                'max_length': 96,
                'name': 'expStates',
                'repeated_var_args': True
            },
            {
                'cppName': 'initializationBehavior',
                'direction': 'in',
                'grpc_type': 'nidevice_grpc.SessionInitializationBehavior',
                'name': 'initializationBehavior',
                'proto_only': True,
                'type': 'int32'
            },
            {
                'cppName': 'newSessionInitialized',
                'direction': 'out',
                'grpc_type': 'bool',
                'name': 'newSessionInitialized',
                'proto_only': True,
                'type': 'bool'
            }
        ],
        'returns': 'int32'
    },
    'CreateWatchdogTimerTaskEx': {
        'init_method': True,
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'is_session_name': True,
                'name': 'sessionName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'cppName': 'initializationBehavior',
                'direction': 'in',
                'grpc_type': 'nidevice_grpc.SessionInitializationBehavior',
                'name': 'initializationBehavior',
                'proto_only': True,
                'type': 'int32'
            },
            {
                'cppName': 'newSessionInitialized',
                'direction': 'out',
                'grpc_type': 'bool',
                'name': 'newSessionInitialized',
                'proto_only': True,
                'type': 'bool'
            }
        ],
        'returns': 'int32'
    },
    'DeleteNetworkDevice': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'DeleteSavedGlobalChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'channelName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'DeleteSavedScale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'DeleteSavedTask': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'taskName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'DeviceSupportsCal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'calSupported',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'DisableRefTrig': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'DisableStartTrig': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'DisconnectTerms': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'sourceTerminal',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'destinationTerminal',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ExportSignal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Signal',
                'name': 'signalID',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'outputTerminal',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'GetAIACExcitFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIACExcitSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIACExcitWireMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'ACExcitWireMode',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIADCCustomTimingMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIADCTimingMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'ADCTimingMode',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIAccel4WireDCVoltageSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIAccel4WireDCVoltageSensitivityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'AccelSensitivityUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIAccelChargeSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIAccelChargeSensitivityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'AccelChargeSensitivityUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIAccelSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIAccelSensitivityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'AccelSensitivityUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIAccelUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'AccelUnits2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIAcceldBRef': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIAtten': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIAutoZeroMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'AutoZeroType1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIAveragingWinSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgeBalanceCoarsePot': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgeBalanceFinePot': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgeCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'BridgeConfiguration1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgeElectricalUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'BridgeElectricalUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgeInitialRatio': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgeInitialVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgeNomResistance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgePhysicalUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'BridgePhysicalUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgePolyForwardCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgePolyReverseCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgeScaleType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'ScaleType4',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgeShuntCalEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgeShuntCalGainAdjust': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgeShuntCalSelect': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'ShuntCalSelect',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgeShuntCalShuntCalAActualResistance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgeShuntCalShuntCalAResistance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgeShuntCalShuntCalASrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'BridgeShuntCalSource',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgeShuntCalShuntCalBActualResistance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgeShuntCalShuntCalBResistance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgeTableElectricalVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgeTablePhysicalVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgeTwoPointLinFirstElectricalVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgeTwoPointLinFirstPhysicalVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgeTwoPointLinSecondElectricalVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgeTwoPointLinSecondPhysicalVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIBridgeUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'BridgeUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIChanCalApplyCalIfExp': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIChanCalCalDate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channelName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'year',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'month',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'day',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'hour',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'minute',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIChanCalDesc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIChanCalEnableCal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIChanCalExpDate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channelName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'year',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'month',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'day',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'hour',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'minute',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIChanCalHasValidCalInfo': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIChanCalOperatorName': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIChanCalPolyForwardCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIChanCalPolyReverseCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIChanCalScaleType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'ScaleType3',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIChanCalTablePreScaledVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIChanCalTableScaledVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIChanCalVerifAcqVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIChanCalVerifRefVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIChargeUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'ChargeUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIChopEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIConvActiveEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIConvActiveEdgeEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIConvDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIConvDigFltrEnableEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIConvDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIConvDigFltrMinPulseWidthEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIConvDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIConvDigFltrTimebaseRateEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIConvDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIConvDigFltrTimebaseSrcEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIConvDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIConvDigSyncEnableEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIConvMaxRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIConvMaxRateEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIConvRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIConvRateEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIConvSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIConvSrcEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIConvTimebaseDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIConvTimebaseDivEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIConvTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'MIOAIConvertTbSrc',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIConvTimebaseSrcEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAICoupling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'Coupling1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAICurrentACRMSUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'CurrentUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAICurrentShuntLoc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'CurrentShuntResistorLocation1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAICurrentShuntResistance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAICurrentUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'CurrentUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAICustomScaleName': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIDCOffset': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIDataXferCustomThreshold': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIDataXferMaxRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIDataXferMech': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'DataTransferMechanism',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIDataXferReqCond': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'InputDataTransferCondition',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIDevScalingCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIDigFltrBandpassCenterFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIDigFltrBandpassWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIDigFltrCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIDigFltrHighpassCutoffFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIDigFltrLowpassCutoffFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIDigFltrNotchCenterFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIDigFltrNotchWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIDigFltrOrder': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIDigFltrResponse': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'FilterResponse',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIDigFltrType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'FilterType2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIDigFltrTypes': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'FilterType2',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIDitherEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIEddyCurrentProxProbeSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIEddyCurrentProxProbeSensitivityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'EddyCurrentProxProbeSensitivityUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIEddyCurrentProxProbeUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LengthUnits2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIEnhancedAliasRejectionEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIExcitActualVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIExcitDCorAC': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'ExcitationDCorAC',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIExcitIdleOutputBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'ExcitationIdleOutputBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIExcitSense': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'Sense',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIExcitSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'ExcitationSource',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIExcitUseForScaling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIExcitUseMultiplexed': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIExcitVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIExcitVoltageOrCurrent': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'ExcitationVoltageOrCurrent',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIFilterDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIFilterDelayAdjustment': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIFilterDelayUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'DigitalWidthUnits4',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIFilterEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIFilterFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIFilterOrder': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIFilterResponse': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'FilterResponse1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIForceIEPESensorSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIForceIEPESensorSensitivityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'ForceIEPESensorSensitivityUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIForceReadFromChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIForceUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'ForceUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIFreqHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIFreqThreshVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIFreqUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'FrequencyUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIGain': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIImpedance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'Impedance1',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIInputLimitsFaultDetectEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIInputLimitsFaultDetectLowerLimit': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIInputLimitsFaultDetectUpperLimit': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIInputSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIIsTEDS': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAILVDTSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAILVDTSensitivityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LVDTSensitivityUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAILVDTUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LengthUnits2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAILeadWireResistance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAILossyLSBRemovalCompressedSampSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAILowpassCutoffFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAILowpassEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAILowpassSwitchCapClkSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'SourceSelection',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAILowpassSwitchCapExtClkDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAILowpassSwitchCapExtClkFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAILowpassSwitchCapOutClkDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIMax': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIMeasType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'AIMeasurementType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIMemMapEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIMicrophoneSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIMin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIOpenChanDetectEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIOpenThrmcplDetectEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIOvercurrentDetectEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIPowerSupplyFaultDetectEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIPressureUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'PressureUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIProbeAtten': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIRTDA': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIRTDB': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIRTDC': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIRTDR0': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIRTDType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'RTDType1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIRVDTSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIRVDTSensitivityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'RVDTSensitivityUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIRVDTUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'AngleUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIRawDataCompressionType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'RawDataCompressionType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIRawSampJustification': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'DataJustification1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIRawSampSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIRemoveFilterDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIResistanceCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'ResistanceConfiguration',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIResistanceUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'ResistanceUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIResolution': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIResolutionUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'ResolutionType1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIRngHigh': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIRngLow': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIRosetteStrainGageOrientation': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIRosetteStrainGageRosetteMeasType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'StrainGageRosetteMeasurementType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIRosetteStrainGageRosetteType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'StrainGageRosetteType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIRosetteStrainGageStrainChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAISampAndHoldEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAISensorPowerCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'SensorPowerCfg',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAISensorPowerType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'SensorPowerType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAISensorPowerVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAISoundPressureMaxSoundPressureLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAISoundPressureUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'SoundPressureUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAISoundPressuredBRef': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIStrainGageCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'StrainGageBridgeType1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIStrainGageForceReadFromChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIStrainGageGageFactor': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIStrainGagePoissonRatio': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIStrainUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'StrainUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAITEDSUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAITempUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'TemperatureUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAITermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'InputTermCfg',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIThrmcplCJCChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIThrmcplCJCSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'CJCSource1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIThrmcplCJCVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIThrmcplLeadOffsetVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIThrmcplScaleType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'ScaleType2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIThrmcplType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'ThermocoupleType1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIThrmstrA': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIThrmstrB': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIThrmstrC': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIThrmstrR1': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAITorqueUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'TorqueUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIUsbXferReqCount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIUsbXferReqSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIVelocityIEPESensorSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIVelocityIEPESensorSensitivityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'VelocityIEPESensorSensitivityUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIVelocityIEPESensordBRef': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAIVelocityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'VelocityUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIVoltageACRMSUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'VoltageUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIVoltageUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'VoltageUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAIVoltagedBRef': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAOCommonModeOffset': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAOCurrentUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'CurrentUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAOCustomScaleName': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAODACOffsetExtSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAODACOffsetSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'SourceSelection',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAODACOffsetVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAODACRefAllowConnToGnd': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAODACRefConnToGnd': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAODACRefExtSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAODACRefSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'SourceSelection',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAODACRefVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAODACRngHigh': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAODACRngLow': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAODataXferMech': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'DataTransferMechanism',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAODataXferReqCond': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'OutputDataTransferCondition',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAODevScalingCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAOEnhancedImageRejectionEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAOFilterDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAOFilterDelayAdjustment': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAOFilterDelayUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'DigitalWidthUnits4',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAOFuncGenAmplitude': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAOFuncGenFMDeviation': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAOFuncGenFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAOFuncGenModulationType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'ModulationType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAOFuncGenOffset': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAOFuncGenSquareDutyCycle': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAOFuncGenStartPhase': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAOFuncGenType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'FuncGenType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAOGain': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAOIdleOutputBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'AOIdleOutputBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAOLoadImpedance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAOMax': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAOMemMapEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAOMin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAOOutputImpedance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAOOutputType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'AOOutputChannelType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAOPowerAmpChannelEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAOPowerAmpGain': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAOPowerAmpOffset': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAOPowerAmpOvercurrent': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAOPowerAmpScalingCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAOReglitchEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAOResolution': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAOResolutionUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'ResolutionType1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAOTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'OutputTermCfg',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAOUsbXferReqCount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAOUsbXferReqSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAOUseOnlyOnBrdMem': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAOVoltageCurrentLimit': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAOVoltageUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'VoltageUnits2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAdvTrigType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'TriggerType5',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnalogPowerUpStates': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'include_in_proto': False,
                'name': 'channelName',
                'repeating_argument': True,
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'include_in_proto': False,
                'name': 'state',
                'repeating_argument': True,
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'PowerUpChannelType',
                'include_in_proto': False,
                'name': 'channelType',
                'repeating_argument': True,
                'type': 'int32'
            },
            {
                'direction': 'in',
                'grpc_type': 'repeated AnalogPowerUpChannelAndType',
                'is_compound_type': True,
                'max_length': 96,
                'name': 'channels',
                'repeated_var_args': True
            },
            {
                'direction': 'out',
                'grpc_type': 'repeated double',
                'max_length': 96,
                'name': 'powerUpStates',
                'repeated_var_args': True
            }
        ],
        'returns': 'int32'
    },
    'GetAnalogPowerUpStatesWithOutputType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'channelNames',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'stateArray',
                'size': {
                    'mechanism': 'passed-in-by-ptr',
                    'value': 'arraySizePtr'
                },
                'type': 'float64[]'
            },
            {
                'direction': 'out',
                'enum': 'PowerUpChannelType',
                'name': 'channelTypeArray',
                'size': {
                    'mechanism': 'passed-in-by-ptr',
                    'value': 'arraySizePtr'
                },
                'type': 'int32[]'
            },
            {
                'direction': 'in',
                'name': 'arraySizePtr',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgEdgeRefTrigCoupling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Coupling2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgEdgeRefTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgEdgeRefTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgEdgeRefTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgEdgeRefTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgEdgeRefTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgEdgeRefTrigHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgEdgeRefTrigLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgEdgeRefTrigSlope': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Slope1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgEdgeRefTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgEdgeStartTrigCoupling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Coupling2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgEdgeStartTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgEdgeStartTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgEdgeStartTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgEdgeStartTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgEdgeStartTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgEdgeStartTrigHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgEdgeStartTrigLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgEdgeStartTrigSlope': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Slope1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgEdgeStartTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgLvlPauseTrigCoupling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Coupling2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgLvlPauseTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgLvlPauseTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgLvlPauseTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgLvlPauseTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgLvlPauseTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgLvlPauseTrigHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgLvlPauseTrigLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgLvlPauseTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgLvlPauseTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'ActiveLevel',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgMultiEdgeRefTrigCouplings': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'Coupling2',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgMultiEdgeRefTrigHysts': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgMultiEdgeRefTrigLvls': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgMultiEdgeRefTrigSlopes': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'Slope1',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgMultiEdgeRefTrigSrcs': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgMultiEdgeStartTrigCouplings': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'Coupling2',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgMultiEdgeStartTrigHysts': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgMultiEdgeStartTrigLvls': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgMultiEdgeStartTrigSlopes': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'Slope1',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgMultiEdgeStartTrigSrcs': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinPauseTrigBtm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinPauseTrigCoupling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Coupling2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinPauseTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinPauseTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinPauseTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinPauseTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinPauseTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinPauseTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinPauseTrigTop': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinPauseTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'WindowTriggerCondition2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinRefTrigBtm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinRefTrigCoupling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Coupling2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinRefTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinRefTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinRefTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinRefTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinRefTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinRefTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinRefTrigTop': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinRefTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'WindowTriggerCondition1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinStartTrigBtm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinStartTrigCoupling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Coupling2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinStartTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinStartTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinStartTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinStartTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinStartTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinStartTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinStartTrigTop': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetAnlgWinStartTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'WindowTriggerCondition1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetArmStartTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetArmStartTrigTimescale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Timescale2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetArmStartTrigTimestampEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetArmStartTrigTimestampTimescale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Timescale2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetArmStartTrigTimestampVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'CVIAbsoluteTime'
            }
        ],
        'returns': 'int32'
    },
    'GetArmStartTrigTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'CVIAbsoluteTime'
            }
        ],
        'returns': 'int32'
    },
    'GetArmStartTrigType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'TriggerType4',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetAutoConfiguredCDAQSyncConnections': {
        'parameters': [
            {
                'direction': 'out',
                'name': 'portList',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'portListSize'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'portListSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAuxPowerErrorChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetAuxPowerErrorChansExist': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetBufInputBufSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetBufInputOnbrdBufSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetBufOutputBufSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetBufOutputOnbrdBufSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetBufferAttributeUInt32': {
        'cname': 'DAQmxGetBufferAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'BufferAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIAngEncoderInitialAngle': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIAngEncoderPulsesPerRev': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIAngEncoderUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'AngleUnits2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesActiveEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesCountDirDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesCountDirDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesCountDirDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesCountDirDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesCountDirDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesCountDirHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesCountDirLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesCountDirTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesCountDirThreshVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesCountResetActiveEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesCountResetDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesCountResetDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesCountResetDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesCountResetDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesCountResetDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesCountResetEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesCountResetHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesCountResetLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesCountResetResetCount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesCountResetTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesCountResetTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesCountResetThreshVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesDir': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'CountDirection1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesDirTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesGateDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesGateDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesGateDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesGateDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesGateEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesGateHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesGateLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesGateTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesGateTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesGateThreshVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesGateWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'Level1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesInitialCnt': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICountEdgesThreshVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCICtrTimebaseActiveEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICtrTimebaseDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICtrTimebaseDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCICtrTimebaseDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCICtrTimebaseDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICtrTimebaseDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICtrTimebaseMasterTimebaseDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICtrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCICtrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCICustomScaleName': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIDataXferMech': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'DataTransferMechanism',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIDataXferReqCond': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'InputDataTransferCondition',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIDupCountPrevent': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIDutyCycleDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIDutyCycleDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIDutyCycleDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIDutyCycleDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIDutyCycleLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIDutyCycleStartingEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIDutyCycleTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIDutyCycleTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderAInputDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderAInputDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderAInputDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderAInputDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderAInputDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderAInputLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderAInputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderAInputTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderBInputDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderBInputDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderBInputDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderBInputDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderBInputDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderBInputLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderBInputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderBInputTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderDecodingType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'EncoderType2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderZIndexEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderZIndexPhase': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'EncoderZIndexPhase1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderZIndexVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderZInputDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderZInputDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderZInputDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderZInputDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderZInputDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderZInputLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderZInputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIEncoderZInputTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIFilterDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIFilterDelayUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'DigitalWidthUnits4',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIFilterEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIFilterFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIFilterOrder': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIFilterResponse': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'FilterResponse1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIFreqDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIFreqDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIFreqDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIFreqDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIFreqDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIFreqDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIFreqEnableAveraging': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIFreqHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIFreqLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIFreqMeasMeth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'CounterFrequencyMethod',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIFreqMeasTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIFreqStartingEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIFreqTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIFreqTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIFreqThreshVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIFreqUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'FrequencyUnits3',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIGPSSyncMethod': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'GpsSignalType1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIGPSSyncSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCILinEncoderDistPerPulse': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCILinEncoderInitialPos': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCILinEncoderUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LengthUnits3',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIMax': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIMaxMeasPeriod': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIMeasType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'CIMeasurementType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIMemMapEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIMin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCINumPossiblyInvalidSamps': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIOutputState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'Level1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPeriodDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPeriodDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPeriodDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPeriodDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPeriodDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPeriodDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPeriodEnableAveraging': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPeriodHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPeriodLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPeriodMeasMeth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'CounterFrequencyMethod',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPeriodMeasTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPeriodStartingEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPeriodTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPeriodTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPeriodThreshVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPeriodUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'TimeUnits3',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPrescaler': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseFreqDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseFreqDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseFreqDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseFreqDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseFreqDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseFreqLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseFreqStartEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseFreqTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseFreqTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseFreqUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'FrequencyUnits2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseTicksDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseTicksDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseTicksDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseTicksDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseTicksDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseTicksLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseTicksStartEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseTicksTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseTicksTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseTimeDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseTimeDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseTimeDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseTimeDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseTimeDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseTimeLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseTimeStartEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseTimeTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseTimeTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseTimeUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'TimeUnits2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseWidthDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseWidthDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseWidthDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseWidthDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseWidthDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseWidthLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseWidthStartingEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseWidthTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseWidthTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIPulseWidthUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'TimeUnits3',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCISampClkOverrunBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'SampClkOverrunBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCISampClkOverrunSentinelVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCISemiPeriodDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCISemiPeriodDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCISemiPeriodDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCISemiPeriodDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCISemiPeriodDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCISemiPeriodLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCISemiPeriodStartingEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCISemiPeriodTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCISemiPeriodTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCISemiPeriodUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'TimeUnits3',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCITCReached': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIThreshVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCITimestampInitialSeconds': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCITimestampUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'TimeUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCITwoEdgeSepFirstDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCITwoEdgeSepFirstDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCITwoEdgeSepFirstDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCITwoEdgeSepFirstDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCITwoEdgeSepFirstDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCITwoEdgeSepFirstEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCITwoEdgeSepFirstLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCITwoEdgeSepFirstTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCITwoEdgeSepFirstTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCITwoEdgeSepSecondDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCITwoEdgeSepSecondDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCITwoEdgeSepSecondDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCITwoEdgeSepSecondDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCITwoEdgeSepSecondDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCITwoEdgeSepSecondEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCITwoEdgeSepSecondLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCITwoEdgeSepSecondTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCITwoEdgeSepSecondTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCITwoEdgeSepUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'TimeUnits3',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIUsbXferReqCount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIUsbXferReqSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIVelocityAngEncoderPulsesPerRev': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIVelocityAngEncoderUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'AngularVelocityUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIVelocityDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIVelocityEncoderAInputDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIVelocityEncoderAInputDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIVelocityEncoderAInputDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIVelocityEncoderAInputDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIVelocityEncoderAInputLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIVelocityEncoderAInputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIVelocityEncoderAInputTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIVelocityEncoderBInputDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIVelocityEncoderBInputDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIVelocityEncoderBInputDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIVelocityEncoderBInputDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIVelocityEncoderBInputLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIVelocityEncoderBInputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIVelocityEncoderBInputTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIVelocityEncoderDecodingType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'EncoderType2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIVelocityLinEncoderDistPerPulse': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCIVelocityLinEncoderUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'VelocityUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCIVelocityMeasTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCOAutoIncrCnt': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCOConstrainedGenMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'ConstrainedGenMode',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCOCount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCOCtrTimebaseActiveEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCOCtrTimebaseDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCOCtrTimebaseDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCOCtrTimebaseDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCOCtrTimebaseDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCOCtrTimebaseDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCOCtrTimebaseMasterTimebaseDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCOCtrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCOCtrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCODataXferMech': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'DataTransferMechanism',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCODataXferReqCond': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'OutputDataTransferCondition',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCOEnableInitialDelayOnRetrigger': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCOMemMapEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCOOutputState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'Level1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCOOutputType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'COOutputType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCOPrescaler': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCOPulseDone': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCOPulseDutyCyc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCOPulseFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCOPulseFreqInitialDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCOPulseFreqUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'FrequencyUnits2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCOPulseHighTicks': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCOPulseHighTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCOPulseIdleState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'Level1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCOPulseLowTicks': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCOPulseLowTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCOPulseTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCOPulseTicksInitialDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCOPulseTimeInitialDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCOPulseTimeUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'TimeUnits2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetCORdyForNewVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCOUsbXferReqCount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCOUsbXferReqSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCOUseOnlyOnBrdMem': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetCalAccConnectionCount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCalDevTemp': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetCalInfoAttributeBool': {
        'cname': 'DAQmxGetCalInfoAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'CalibrationInfoAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCalInfoAttributeDouble': {
        'cname': 'DAQmxGetCalInfoAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'CalibrationInfoAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCalInfoAttributeString': {
        'cname': 'DAQmxGetCalInfoAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'CalibrationInfoAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCalInfoAttributeUInt32': {
        'cname': 'DAQmxGetCalInfoAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'CalibrationInfoAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCalRecommendedAccConnectionCountLimit': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCalUserDefinedInfo': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCalUserDefinedInfoMaxSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetCarrierSerialNum': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetChanAttributeBool': {
        'cname': 'DAQmxGetChanAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'ChannelAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetChanAttributeDouble': {
        'cname': 'DAQmxGetChanAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'ChannelAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetChanAttributeDoubleArray': {
        'cname': 'DAQmxGetChanAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'ChannelAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'float64[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetChanAttributeInt32': {
        'cname': 'DAQmxGetChanAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'ChannelAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetChanAttributeString': {
        'cname': 'DAQmxGetChanAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'ChannelAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetChanAttributeUInt32': {
        'cname': 'DAQmxGetChanAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'ChannelAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetChanDescr': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetChanIsGlobal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetChanSyncUnlockBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'SyncUnlockBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetChanType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'ChannelType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetChangeDetectDIFallingEdgePhysicalChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetChangeDetectDIRisingEdgePhysicalChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetChangeDetectDITristate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDIAcquireOn': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'SampleClockActiveOrInactiveEdgeSelection',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDIDataXferMech': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'DataTransferMechanism',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDIDataXferReqCond': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'InputDataTransferCondition',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDIDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDIDigFltrEnableBusMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDIDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetDIDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetDIDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDIDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDIInvertLines': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDILogicFamily': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LogicFamily',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDIMemMapEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDINumLines': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDITristate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDIUsbXferReqCount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDIUsbXferReqSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDODataXferMech': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'DataTransferMechanism',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDODataXferReqCond': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'OutputDataTransferCondition',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDOGenerateOn': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'SampleClockActiveOrInactiveEdgeSelection',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDOInvertLines': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDOLineStatesDoneState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'DigitalLineState',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDOLineStatesPausedState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'DigitalLineState',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDOLineStatesStartState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'DigitalLineState',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDOLogicFamily': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'LogicFamily',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDOMemMapEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDONumLines': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDOOutputDriveType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'DigitalDriveType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDOOvercurrentAutoReenable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDOOvercurrentLimit': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetDOOvercurrentReenablePeriod': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetDOTristate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDOUsbXferReqCount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDOUsbXferReqSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDOUseOnlyOnBrdMem': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDelayFromSampClkDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetDelayFromSampClkDelayEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetDelayFromSampClkDelayUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'DigitalWidthUnits2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDelayFromSampClkDelayUnitsEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAIBridgeRngs': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAIChargeRngs': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAICouplings': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'Coupling1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAICurrentIntExcitDiscreteVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAICurrentRngs': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAIDigFltrLowpassCutoffFreqDiscreteVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAIDigFltrLowpassCutoffFreqRangeVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAIFreqRngs': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAIGains': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAILowpassCutoffFreqDiscreteVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAILowpassCutoffFreqRangeVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAIMaxMultiChanRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAIMaxSingleChanRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAIMinRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAINumSampTimingEngines': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAINumSyncPulseSrcs': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAIPhysicalChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAIResistanceRngs': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAISampModes': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'AcquisitionType',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAISimultaneousSamplingSupported': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAISupportedMeasTypes': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'AIMeasurementType',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAITrigUsage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'TriggerUsage',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAIVoltageIntExcitDiscreteVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAIVoltageIntExcitRangeVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAIVoltageRngs': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAOCurrentRngs': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAOGains': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAOMaxRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAOMinRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAONumSampTimingEngines': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAONumSyncPulseSrcs': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAOPhysicalChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAOSampClkSupported': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAOSampModes': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'AcquisitionType',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAOSupportedOutputTypes': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'AOOutputChannelType',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAOTrigUsage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'TriggerUsage',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAOVoltageRngs': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAccessoryProductNums': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAccessoryProductTypes': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAccessorySerialNums': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevAnlgTrigSupported': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevBusType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'BusType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevCIMaxSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevCIMaxTimebase': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetDevCIPhysicalChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevCISampClkSupported': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevCISampModes': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'AcquisitionType',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevCISupportedMeasTypes': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'CIMeasurementType',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevCITrigUsage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'TriggerUsage',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevCOMaxSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevCOMaxTimebase': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetDevCOPhysicalChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevCOSampClkSupported': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevCOSampModes': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'AcquisitionType',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevCOSupportedOutputTypes': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'COOutputType',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevCOTrigUsage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'TriggerUsage',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevChassisModuleDevNames': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevCompactDAQChassisDevName': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevCompactDAQSlotNum': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevCompactRIOChassisDevName': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevCompactRIOSlotNum': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevDILines': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevDIMaxRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetDevDINumSampTimingEngines': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevDIPorts': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevDITrigUsage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'TriggerUsage',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevDOLines': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevDOMaxRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetDevDONumSampTimingEngines': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevDOPorts': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevDOTrigUsage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'TriggerUsage',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevDigTrigSupported': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevIsSimulated': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevNumDMAChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevNumTimeTrigs': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevNumTimestampEngines': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevPCIBusNum': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevPCIDevNum': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevPXIChassisNum': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevPXISlotNum': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevProductCategory': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'ProductCategory',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevProductNum': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevProductType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevSerialNum': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevTCPIPEthernetIP': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevTCPIPHostname': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevTCPIPWirelessIP': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevTEDSHWTEDSSupported': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevTerminals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDevTimeTrigSupported': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDeviceAttributeBool': {
        'cname': 'DAQmxGetDeviceAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'DeviceAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDeviceAttributeDouble': {
        'cname': 'DAQmxGetDeviceAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'DeviceAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDeviceAttributeDoubleArray': {
        'cname': 'DAQmxGetDeviceAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'DeviceAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'float64[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDeviceAttributeInt32': {
        'cname': 'DAQmxGetDeviceAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'DeviceAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDeviceAttributeInt32Array': {
        'cname': 'DAQmxGetDeviceAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'DeviceAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'int32[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDeviceAttributeString': {
        'cname': 'DAQmxGetDeviceAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'DeviceAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDeviceAttributeUInt32': {
        'cname': 'DAQmxGetDeviceAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'DeviceAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDeviceAttributeUInt32Array': {
        'cname': 'DAQmxGetDeviceAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'DeviceAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'uInt32[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeAdvTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeAdvTrigEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeAdvTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeArmStartTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeArmStartTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeArmStartTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeArmStartTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeArmStartTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeArmStartTrigEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeArmStartTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeRefTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeRefTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeRefTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeRefTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeRefTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeRefTrigEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeRefTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeStartTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeStartTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeStartTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeStartTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeStartTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeStartTrigEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeStartTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeWatchdogExpirTrigEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigEdgeWatchdogExpirTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigLvlPauseTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigLvlPauseTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetDigLvlPauseTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetDigLvlPauseTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigLvlPauseTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigLvlPauseTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigLvlPauseTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Level1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigPatternPauseTrigPattern': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigPatternPauseTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigPatternPauseTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'DigitalPatternCondition1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigPatternRefTrigPattern': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigPatternRefTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigPatternRefTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'DigitalPatternCondition1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigPatternStartTrigPattern': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigPatternStartTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigPatternStartTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'DigitalPatternCondition1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigitalLogicFamilyPowerUpState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'logicFamily',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetDigitalPowerUpStates': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'include_in_proto': False,
                'name': 'channelName',
                'repeating_argument': True,
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'PowerUpStates',
                'include_in_proto': False,
                'name': 'state',
                'repeating_argument': True,
                'type': 'int32'
            },
            {
                'direction': 'in',
                'grpc_type': 'repeated string',
                'max_length': 96,
                'name': 'channelName',
                'repeated_var_args': True
            },
            {
                'direction': 'out',
                'grpc_type': 'repeated PowerUpStates',
                'max_length': 96,
                'name': 'powerUpStates',
                'repeated_var_args': True
            }
        ],
        'returns': 'int32'
    },
    'GetDigitalPullUpPullDownStates': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'include_in_proto': False,
                'name': 'channelName',
                'repeating_argument': True,
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'ResistorState',
                'include_in_proto': False,
                'name': 'state',
                'repeating_argument': True,
                'type': 'int32'
            },
            {
                'direction': 'in',
                'grpc_type': 'repeated string',
                'max_length': 96,
                'name': 'channelName',
                'repeated_var_args': True
            },
            {
                'direction': 'out',
                'grpc_type': 'repeated ResistorState',
                'max_length': 96,
                'name': 'pullUpPullDownStates',
                'repeated_var_args': True
            }
        ],
        'returns': 'int32'
    },
    'GetDisconnectedCDAQSyncPorts': {
        'parameters': [
            {
                'direction': 'out',
                'name': 'portList',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'portListSize'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'portListSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetErrorString': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'errorCode',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'errorString',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'bufferSize'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExported10MHzRefClkOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExported20MHzTimebaseOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedAIConvClkOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedAIConvClkPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedAIHoldCmpltEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedAIHoldCmpltEventPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedAdvCmpltEventDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedAdvCmpltEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedAdvCmpltEventPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedAdvCmpltEventPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedAdvTrigOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedAdvTrigPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedAdvTrigPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedAdvTrigPulseWidthUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'DigitalWidthUnits3',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedChangeDetectEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedChangeDetectEventPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedCtrOutEventOutputBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'ExportActions2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedCtrOutEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedCtrOutEventPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedCtrOutEventToggleIdleState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Level1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedDataActiveEventLvlActiveLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedDataActiveEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedDividedSampClkTimebaseOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedHshkEventDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedHshkEventInterlockedAssertOnStart': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedHshkEventInterlockedAssertedLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Level1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedHshkEventInterlockedDeassertDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedHshkEventOutputBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'ExportActions5',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedHshkEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedHshkEventPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedHshkEventPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedPauseTrigLvlActiveLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedPauseTrigOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedRdyForStartEventLvlActiveLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedRdyForStartEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedRdyForXferEventDeassertCond': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'DeassertCondition',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedRdyForXferEventDeassertCondCustomThreshold': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedRdyForXferEventLvlActiveLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedRdyForXferEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedRefTrigOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedRefTrigPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedSampClkDelayOffset': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedSampClkOutputBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'ExportActions3',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedSampClkOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedSampClkPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedSampClkTimebaseOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedSignalAttributeBool': {
        'cname': 'DAQmxGetExportedSignalAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'ExportSignalAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedSignalAttributeDouble': {
        'cname': 'DAQmxGetExportedSignalAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'ExportSignalAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedSignalAttributeInt32': {
        'cname': 'DAQmxGetExportedSignalAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'ExportSignalAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedSignalAttributeString': {
        'cname': 'DAQmxGetExportedSignalAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'ExportSignalAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedSignalAttributeUInt32': {
        'cname': 'DAQmxGetExportedSignalAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'ExportSignalAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedStartTrigOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedStartTrigPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedSyncPulseEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExportedWatchdogExpiredEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExtCalLastDateAndTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'year',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'month',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'day',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'hour',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'minute',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExtCalLastTemp': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetExtCalRecommendedInterval': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetExtendedErrorInfo': {
        'parameters': [
            {
                'direction': 'out',
                'name': 'errorString',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'bufferSize'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetFieldDAQBankDevNames': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetFieldDAQDevName': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'device',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetFirstSampClkOffset': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetFirstSampClkTimescale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Timescale2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetFirstSampClkWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'CVIAbsoluteTime'
            }
        ],
        'returns': 'int32'
    },
    'GetFirstSampTimestampEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetFirstSampTimestampTimescale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Timescale2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetFirstSampTimestampVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'CVIAbsoluteTime'
            }
        ],
        'returns': 'int32'
    },
    'GetHshkDelayAfterXfer': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetHshkSampleInputDataWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'SampleInputDataWhen',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetHshkStartCond': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'HandshakeStartCondition',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetHshkTrigType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'TriggerType9',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetImplicitUnderflowBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'UnderflowBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetInterlockedHshkTrigAssertedLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Level1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetInterlockedHshkTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetLoggingFilePath': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetLoggingFilePreallocationSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt64'
            }
        ],
        'returns': 'int32'
    },
    'GetLoggingFileWriteSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetLoggingMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'LoggingMode',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetLoggingPause': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetLoggingSampsPerFile': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt64'
            }
        ],
        'returns': 'int32'
    },
    'GetLoggingTDMSGroupName': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetLoggingTDMSOperation': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'LoggingOperation',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetMasterTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetMasterTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetNthTaskChannel': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'index',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'buffer',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'bufferSize'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetNthTaskDevice': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'index',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'buffer',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'bufferSize'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetNthTaskReadChannel': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'index',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'buffer',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'bufferSize'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetOnDemandSimultaneousAOEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetPauseTrigTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPauseTrigType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'TriggerType6',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetPersistedChanAllowInteractiveDeletion': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetPersistedChanAllowInteractiveEditing': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetPersistedChanAttributeBool': {
        'cname': 'DAQmxGetPersistedChanAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'PersistedChannelAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPersistedChanAttributeString': {
        'cname': 'DAQmxGetPersistedChanAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'PersistedChannelAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPersistedChanAuthor': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPersistedScaleAllowInteractiveDeletion': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetPersistedScaleAllowInteractiveEditing': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetPersistedScaleAttributeBool': {
        'cname': 'DAQmxGetPersistedScaleAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'PersistedScaleAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPersistedScaleAttributeString': {
        'cname': 'DAQmxGetPersistedScaleAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'PersistedScaleAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPersistedScaleAuthor': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPersistedTaskAllowInteractiveDeletion': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'taskName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetPersistedTaskAllowInteractiveEditing': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'taskName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetPersistedTaskAttributeBool': {
        'cname': 'DAQmxGetPersistedTaskAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'taskName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'PersistedTaskAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPersistedTaskAttributeString': {
        'cname': 'DAQmxGetPersistedTaskAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'taskName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'PersistedTaskAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPersistedTaskAuthor': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'taskName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAIInputSrcs': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAIPowerControlEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAIPowerControlType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'SensorPowerType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAIPowerControlVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAISensorPowerOpenChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAISensorPowerOvercurrent': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAISensorPowerTypes': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'SensorPowerType',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAISensorPowerVoltageRangeVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAISupportedMeasTypes': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'AIMeasurementType',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAITermCfgs': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'InputTermCfg',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAOManualControlAmplitude': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAOManualControlEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAOManualControlFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAOManualControlShortDetected': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAOSupportedOutputTypes': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'AOOutputChannelType',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAOSupportedPowerUpOutputTypes': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'AOPowerUpOutputBehavior',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAOTermCfgs': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'OutputTermCfg',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAttributeBool': {
        'cname': 'DAQmxGetPhysicalChanAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'PhysicalChannelAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAttributeBytes': {
        'cname': 'DAQmxGetPhysicalChanAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'PhysicalChannelAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'uInt8[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAttributeDouble': {
        'cname': 'DAQmxGetPhysicalChanAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'PhysicalChannelAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAttributeDoubleArray': {
        'cname': 'DAQmxGetPhysicalChanAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'PhysicalChannelAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'float64[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAttributeInt32': {
        'cname': 'DAQmxGetPhysicalChanAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'PhysicalChannelAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAttributeInt32Array': {
        'cname': 'DAQmxGetPhysicalChanAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'PhysicalChannelAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'int32[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAttributeString': {
        'cname': 'DAQmxGetPhysicalChanAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'PhysicalChannelAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAttributeUInt32': {
        'cname': 'DAQmxGetPhysicalChanAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'PhysicalChannelAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanAttributeUInt32Array': {
        'cname': 'DAQmxGetPhysicalChanAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'PhysicalChannelAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'uInt32[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanCISupportedMeasTypes': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'CIMeasurementType',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanCOSupportedOutputTypes': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'COOutputType',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanDIChangeDetectSupported': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanDIPortWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanDISampClkSupported': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanDISampModes': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'AcquisitionType',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanDOPortWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanDOSampClkSupported': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanDOSampModes': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'AcquisitionType',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanName': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanTEDSBitStream': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt8'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanTEDSMfgID': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanTEDSModelNum': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanTEDSSerialNum': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanTEDSTemplateIDs': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanTEDSVersionLetter': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPhysicalChanTEDSVersionNum': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPossibleSCExpressCalAccConnections': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'channelNames',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'connections',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'connectionsBufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPwrCurrentDevScalingCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPwrCurrentSetpoint': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetPwrIdleOutputBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'PowerIdleOutputBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetPwrOutputEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetPwrOutputState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'PowerOutputState',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetPwrRemoteSense': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'Sense',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetPwrVoltageDevScalingCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetPwrVoltageSetpoint': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetReadAccessoryInsertionOrRemovalDetected': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadAttributeBool': {
        'cname': 'DAQmxGetReadAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'ReadAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadAttributeDouble': {
        'cname': 'DAQmxGetReadAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'ReadAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadAttributeInt32': {
        'cname': 'DAQmxGetReadAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'ReadAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadAttributeString': {
        'cname': 'DAQmxGetReadAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'ReadAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadAttributeUInt32': {
        'cname': 'DAQmxGetReadAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'ReadAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadAttributeUInt64': {
        'cname': 'DAQmxGetReadAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'ReadAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'uInt64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadAutoStart': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadAvailSampPerChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadChangeDetectHasOverflowed': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadChannelsToRead': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadCommonModeRangeErrorChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadCommonModeRangeErrorChansExist': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadCurrReadPos': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt64'
            }
        ],
        'returns': 'int32'
    },
    'GetReadDevsWithInsertedOrRemovedAccessories': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadDigitalLinesBytesPerChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadExcitFaultChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadExcitFaultChansExist': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadInputLimitsFaultChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadInputLimitsFaultChansExist': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadNumChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadOffset': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadOpenChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadOpenChansDetails': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadOpenChansExist': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadOpenCurrentLoopChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadOpenCurrentLoopChansExist': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadOpenThrmcplChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadOpenThrmcplChansExist': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadOverWrite': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'OverwriteMode1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadOvercurrentChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadOvercurrentChansExist': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadOverloadedChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadOverloadedChansExist': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadOvertemperatureChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadOvertemperatureChansExist': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadPLLUnlockedChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadPLLUnlockedChansExist': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadPowerSupplyFaultChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadPowerSupplyFaultChansExist': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadRawDataWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadReadAllAvailSamp': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadRelativeTo': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'ReadRelativeTo',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadSleepTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetReadSyncUnlockedChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadSyncUnlockedChansExist': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetReadTotalSampPerChanAcquired': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt64'
            }
        ],
        'returns': 'int32'
    },
    'GetReadWaitMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'WaitMode',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetRealTimeAttributeBool': {
        'cname': 'DAQmxGetRealTimeAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'RealTimeAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetRealTimeAttributeInt32': {
        'cname': 'DAQmxGetRealTimeAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'RealTimeAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetRealTimeAttributeUInt32': {
        'cname': 'DAQmxGetRealTimeAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'RealTimeAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetRealTimeConvLateErrorsToWarnings': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetRealTimeNumOfWarmupIters': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetRealTimeReportMissedSamp': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetRealTimeWaitForNextSampClkWaitMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'WaitMode3',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetRealTimeWriteRecoveryMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'WaitMode4',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetRefClkRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetRefClkSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetRefTrigAutoTrigEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetRefTrigAutoTriggered': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetRefTrigDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetRefTrigMaxNumTrigsToDetect': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetRefTrigPretrigSamples': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetRefTrigRetriggerWin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetRefTrigRetriggerable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetRefTrigTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetRefTrigTimestampEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetRefTrigTimestampTimescale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Timescale2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetRefTrigTimestampVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'CVIAbsoluteTime'
            }
        ],
        'returns': 'int32'
    },
    'GetRefTrigTrigWin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetRefTrigType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'TriggerType8',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetRemoteSenseErrorChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetRemoteSenseErrorChansExist': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetSampClkActiveEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetSampClkDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetSampClkDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetSampClkDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetSampClkDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSampClkDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetSampClkMaxRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetSampClkOverrunBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'OverflowBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetSampClkRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetSampClkSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSampClkTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSampClkTimebaseActiveEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetSampClkTimebaseDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSampClkTimebaseMasterTimebaseDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSampClkTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetSampClkTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSampClkTimebaseTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSampClkTimingResponseMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetSampClkUnderflowBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'UnderflowBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetSampClkWriteWfmUseInitialWfmDT': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetSampQuantSampMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'AcquisitionType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetSampQuantSampPerChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt64'
            }
        ],
        'returns': 'int32'
    },
    'GetSampTimingEngine': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSampTimingType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'SampleTimingType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetScaleAttributeDouble': {
        'cname': 'DAQmxGetScaleAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'ScaleAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetScaleAttributeDoubleArray': {
        'cname': 'DAQmxGetScaleAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'ScaleAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'float64[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetScaleAttributeInt32': {
        'cname': 'DAQmxGetScaleAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'ScaleAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetScaleAttributeString': {
        'cname': 'DAQmxGetScaleAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'ScaleAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetScaleDescr': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetScaleLinSlope': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetScaleLinYIntercept': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetScaleMapPreScaledMax': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetScaleMapPreScaledMin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetScaleMapScaledMax': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetScaleMapScaledMin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetScalePolyForwardCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetScalePolyReverseCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetScalePreScaledUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'UnitsPreScaled',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetScaleScaledUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetScaleTablePreScaledVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetScaleTableScaledVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetScaleType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'ScaleType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetSelfCalLastDateAndTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'year',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'month',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'day',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'hour',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'minute',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSelfCalLastTemp': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetSelfCalSupported': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetStartTrigDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetStartTrigDelayUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'DigitalWidthUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetStartTrigMaxNumTrigsToDetect': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetStartTrigRetriggerWin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetStartTrigRetriggerable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetStartTrigTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetStartTrigTimescale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Timescale2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetStartTrigTimestampEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetStartTrigTimestampTimescale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Timescale2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetStartTrigTimestampVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'CVIAbsoluteTime'
            }
        ],
        'returns': 'int32'
    },
    'GetStartTrigTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'CVIAbsoluteTime'
            }
        ],
        'returns': 'int32'
    },
    'GetStartTrigTrigWin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetStartTrigType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'TriggerType10',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchChanAnlgBusSharingEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'switchChannelName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchChanBandwidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'switchChannelName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchChanImpedance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'switchChannelName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchChanMaxACCarryCurrent': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'switchChannelName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchChanMaxACCarryPwr': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'switchChannelName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchChanMaxACSwitchCurrent': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'switchChannelName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchChanMaxACSwitchPwr': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'switchChannelName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchChanMaxACVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'switchChannelName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchChanMaxDCCarryCurrent': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'switchChannelName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchChanMaxDCCarryPwr': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'switchChannelName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchChanMaxDCSwitchCurrent': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'switchChannelName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchChanMaxDCSwitchPwr': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'switchChannelName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchChanMaxDCVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'switchChannelName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchChanUsage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'switchChannelName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'SwitchUsageTypes',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchChanWireMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'switchChannelName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchDevAutoConnAnlgBus': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchDevNumColumns': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchDevNumRelays': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchDevNumRows': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchDevNumSwitchChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchDevPwrDownLatchRelaysAfterSettling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchDevRelayList': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchDevSettled': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchDevSettlingTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchDevSwitchChanList': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchDevTemperature': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchDevTopology': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchScanBreakMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'BreakMode',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchScanRepeatMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'SwitchScanRepeatMode',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetSwitchScanWaitingForAdv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetSyncClkInterval': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSyncPulseMinDelayToStart': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetSyncPulseResetDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetSyncPulseResetTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetSyncPulseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSyncPulseSyncTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetSyncPulseTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSyncPulseTimeTimescale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'Timescale2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetSyncPulseTimeWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'CVIAbsoluteTime'
            }
        ],
        'returns': 'int32'
    },
    'GetSyncPulseType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'SyncPulseType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetSysDevNames': {
        'parameters': [
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSysGlobalChans': {
        'parameters': [
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSysNIDAQMajorVersion': {
        'parameters': [
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSysNIDAQMinorVersion': {
        'parameters': [
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSysNIDAQUpdateVersion': {
        'parameters': [
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSysScales': {
        'parameters': [
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSysTasks': {
        'parameters': [
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSystemInfoAttributeString': {
        'cname': 'DAQmxGetSystemInfoAttribute',
        'parameters': [
            {
                'direction': 'in',
                'grpc_type': 'SystemAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetSystemInfoAttributeUInt32': {
        'cname': 'DAQmxGetSystemInfoAttribute',
        'parameters': [
            {
                'direction': 'in',
                'grpc_type': 'SystemAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTaskAttributeBool': {
        'cname': 'DAQmxGetTaskAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TaskAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTaskAttributeString': {
        'cname': 'DAQmxGetTaskAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TaskAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTaskAttributeUInt32': {
        'cname': 'DAQmxGetTaskAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TaskAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTaskChannels': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTaskComplete': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetTaskDevices': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTaskName': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTaskNumChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTaskNumDevices': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTimingAttributeBool': {
        'cname': 'DAQmxGetTimingAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTimingAttributeDouble': {
        'cname': 'DAQmxGetTimingAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTimingAttributeExBool': {
        'cname': 'DAQmxGetTimingAttributeEx',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTimingAttributeExDouble': {
        'cname': 'DAQmxGetTimingAttributeEx',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTimingAttributeExInt32': {
        'cname': 'DAQmxGetTimingAttributeEx',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTimingAttributeExString': {
        'cname': 'DAQmxGetTimingAttributeEx',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTimingAttributeExTimestamp': {
        'cname': 'DAQmxGetTimingAttributeEx',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'CVIAbsoluteTime'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTimingAttributeExUInt32': {
        'cname': 'DAQmxGetTimingAttributeEx',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTimingAttributeExUInt64': {
        'cname': 'DAQmxGetTimingAttributeEx',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'uInt64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTimingAttributeInt32': {
        'cname': 'DAQmxGetTimingAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTimingAttributeString': {
        'cname': 'DAQmxGetTimingAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTimingAttributeTimestamp': {
        'cname': 'DAQmxGetTimingAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'CVIAbsoluteTime'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTimingAttributeUInt32': {
        'cname': 'DAQmxGetTimingAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTimingAttributeUInt64': {
        'cname': 'DAQmxGetTimingAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'uInt64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTrigAttributeBool': {
        'cname': 'DAQmxGetTrigAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TriggerAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTrigAttributeDouble': {
        'cname': 'DAQmxGetTrigAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TriggerAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTrigAttributeDoubleArray': {
        'cname': 'DAQmxGetTrigAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TriggerAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'float64[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTrigAttributeInt32': {
        'cname': 'DAQmxGetTrigAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TriggerAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTrigAttributeInt32Array': {
        'cname': 'DAQmxGetTrigAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TriggerAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'int32[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTrigAttributeString': {
        'cname': 'DAQmxGetTrigAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TriggerAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTrigAttributeTimestamp': {
        'cname': 'DAQmxGetTrigAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TriggerAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'CVIAbsoluteTime'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTrigAttributeUInt32': {
        'cname': 'DAQmxGetTrigAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TriggerAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetTriggerSyncType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'SyncType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetWatchdogAOExpirState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'lines',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetWatchdogAOOutputType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'lines',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'WatchdogAOExpirState',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetWatchdogAttributeBool': {
        'cname': 'DAQmxGetWatchdogAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'lines',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'WatchdogAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetWatchdogAttributeDouble': {
        'cname': 'DAQmxGetWatchdogAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'lines',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'WatchdogAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetWatchdogAttributeInt32': {
        'cname': 'DAQmxGetWatchdogAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'lines',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'WatchdogAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetWatchdogAttributeString': {
        'cname': 'DAQmxGetWatchdogAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'lines',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'WatchdogAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetWatchdogCOExpirState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'lines',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'WatchdogCOExpirState',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetWatchdogDOExpirState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'lines',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'enum': 'DigitalLineState',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetWatchdogExpirTrigTrigOnNetworkConnLoss': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetWatchdogExpirTrigType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'TriggerType4',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetWatchdogHasExpired': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetWatchdogTimeout': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteAccessoryInsertionOrRemovalDetected': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteAttributeBool': {
        'cname': 'DAQmxGetWriteAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'WriteAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteAttributeDouble': {
        'cname': 'DAQmxGetWriteAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'WriteAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteAttributeInt32': {
        'cname': 'DAQmxGetWriteAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'WriteAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteAttributeString': {
        'cname': 'DAQmxGetWriteAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'WriteAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'size': {
                    'mechanism': 'ivi-dance',
                    'value': 'size'
                },
                'type': 'char[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteAttributeUInt32': {
        'cname': 'DAQmxGetWriteAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'WriteAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteAttributeUInt64': {
        'cname': 'DAQmxGetWriteAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'WriteAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'uInt64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteCurrWritePos': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt64'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteDevsWithInsertedOrRemovedAccessories': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteDigitalLinesBytesPerChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteExternalOvervoltageChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteExternalOvervoltageChansExist': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteNumChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteOffset': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteOpenCurrentLoopChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteOpenCurrentLoopChansExist': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteOvercurrentChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteOvercurrentChansExist': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteOverloadedChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteOverloadedChansExist': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteOvertemperatureChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteOvertemperatureChansExist': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetWritePowerSupplyFaultChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetWritePowerSupplyFaultChansExist': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteRawDataWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteRegenMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'RegenerationMode1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteRelativeTo': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'WriteRelativeTo',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteSleepTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteSpaceAvail': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteSyncUnlockedChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'char'
            },
            {
                'direction': 'in',
                'name': 'bufferSize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteSyncUnlockedChansExist': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteTotalSampPerChanGenerated': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'uInt64'
            }
        ],
        'returns': 'int32'
    },
    'GetWriteWaitMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'enum': 'WaitMode2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'IsReadOrWriteLate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'errorCode',
                'type': 'int32'
            }
        ],
        'returns': 'bool32'
    },
    'IsTaskDone': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'isTaskDone',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'LoadTask': {
        'init_method': True,
        'parameters': [
            {
                'direction': 'in',
                'is_session_name': True,
                'name': 'sessionName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'cppName': 'initializationBehavior',
                'direction': 'in',
                'grpc_type': 'nidevice_grpc.SessionInitializationBehavior',
                'name': 'initializationBehavior',
                'proto_only': True,
                'type': 'int32'
            },
            {
                'cppName': 'newSessionInitialized',
                'direction': 'out',
                'grpc_type': 'bool',
                'name': 'newSessionInitialized',
                'proto_only': True,
                'type': 'bool'
            }
        ],
        'returns': 'int32'
    },
    'PerformBridgeOffsetNullingCal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'PerformBridgeOffsetNullingCalEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'skipUnsupportedChannels',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'PerformBridgeShuntCal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'shuntResistorValue',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'shuntResistorLocation',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'bridgeResistance',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'skipUnsupportedChannels',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'PerformBridgeShuntCalEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'shuntResistorValue',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'ShuntElementLocation',
                'name': 'shuntResistorLocation',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ShuntCalSelect0',
                'name': 'shuntResistorSelect',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ShuntCalSource',
                'name': 'shuntResistorSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'bridgeResistance',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'skipUnsupportedChannels',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'PerformStrainShuntCal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'shuntResistorValue',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'shuntResistorLocation',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'skipUnsupportedChannels',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'PerformStrainShuntCalEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'shuntResistorValue',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'ShuntElementLocation',
                'name': 'shuntResistorLocation',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ShuntCalSelect0',
                'name': 'shuntResistorSelect',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'ShuntCalSource',
                'name': 'shuntResistorSource',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'skipUnsupportedChannels',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'PerformThrmcplLeadOffsetNullingCal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'skipUnsupportedChannels',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadAnalogF64': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'fillMode',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'readArray',
                'size': {
                    'mechanism': 'passed-in',
                    'value': 'arraySizeInSamps'
                },
                'type': 'float64[]'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInSamps',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanRead',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadAnalogScalarF64': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadBinaryI16': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'fillMode',
                'type': 'int32'
            },
            {
                'coerced': True,
                'direction': 'out',
                'name': 'readArray',
                'size': {
                    'mechanism': 'passed-in',
                    'value': 'arraySizeInSamps'
                },
                'type': 'int16[]'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInSamps',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanRead',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadBinaryI32': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'fillMode',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'readArray',
                'size': {
                    'mechanism': 'passed-in',
                    'value': 'arraySizeInSamps'
                },
                'type': 'int32[]'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInSamps',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanRead',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadBinaryU16': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'fillMode',
                'type': 'int32'
            },
            {
                'coerced': True,
                'direction': 'out',
                'name': 'readArray',
                'size': {
                    'mechanism': 'passed-in',
                    'value': 'arraySizeInSamps'
                },
                'type': 'uInt16[]'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInSamps',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanRead',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadBinaryU32': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'fillMode',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'readArray',
                'size': {
                    'mechanism': 'passed-in',
                    'value': 'arraySizeInSamps'
                },
                'type': 'uInt32[]'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInSamps',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanRead',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadCounterF64': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'out',
                'name': 'readArray',
                'size': {
                    'mechanism': 'passed-in',
                    'value': 'arraySizeInSamps'
                },
                'type': 'float64[]'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInSamps',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanRead',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadCounterF64Ex': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'fillMode',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'readArray',
                'size': {
                    'mechanism': 'passed-in',
                    'value': 'arraySizeInSamps'
                },
                'type': 'float64[]'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInSamps',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanRead',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadCounterScalarF64': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadCounterScalarU32': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadCounterU32': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'out',
                'name': 'readArray',
                'size': {
                    'mechanism': 'passed-in',
                    'value': 'arraySizeInSamps'
                },
                'type': 'uInt32[]'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInSamps',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanRead',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadCounterU32Ex': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'fillMode',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'readArray',
                'size': {
                    'mechanism': 'passed-in',
                    'value': 'arraySizeInSamps'
                },
                'type': 'uInt32[]'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInSamps',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanRead',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadCtrFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'interleaved',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'readArrayFrequency',
                'size': {
                    'mechanism': 'passed-in',
                    'value': 'arraySizeInSamps'
                },
                'type': 'float64[]'
            },
            {
                'direction': 'out',
                'name': 'readArrayDutyCycle',
                'size': {
                    'mechanism': 'passed-in',
                    'value': 'arraySizeInSamps'
                },
                'type': 'float64[]'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInSamps',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanRead',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadCtrFreqScalar': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'out',
                'name': 'frequency',
                'type': 'float64'
            },
            {
                'direction': 'out',
                'name': 'dutyCycle',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadCtrTicks': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'interleaved',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'readArrayHighTicks',
                'size': {
                    'mechanism': 'passed-in',
                    'value': 'arraySizeInSamps'
                },
                'type': 'uInt32[]'
            },
            {
                'direction': 'out',
                'name': 'readArrayLowTicks',
                'size': {
                    'mechanism': 'passed-in',
                    'value': 'arraySizeInSamps'
                },
                'type': 'uInt32[]'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInSamps',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanRead',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadCtrTicksScalar': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'out',
                'name': 'highTicks',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'lowTicks',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadCtrTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'interleaved',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'readArrayHighTime',
                'size': {
                    'mechanism': 'passed-in',
                    'value': 'arraySizeInSamps'
                },
                'type': 'float64[]'
            },
            {
                'direction': 'out',
                'name': 'readArrayLowTime',
                'size': {
                    'mechanism': 'passed-in',
                    'value': 'arraySizeInSamps'
                },
                'type': 'float64[]'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInSamps',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanRead',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadCtrTimeScalar': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'out',
                'name': 'highTime',
                'type': 'float64'
            },
            {
                'direction': 'out',
                'name': 'lowTime',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadDigitalLines': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'fillMode',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'readArray',
                'size': {
                    'mechanism': 'passed-in',
                    'value': 'arraySizeInBytes'
                },
                'type': 'uInt8[]'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInBytes',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanRead',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'numBytesPerSamp',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadDigitalScalarU32': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'out',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadDigitalU16': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'fillMode',
                'type': 'int32'
            },
            {
                'coerced': True,
                'direction': 'out',
                'name': 'readArray',
                'size': {
                    'mechanism': 'passed-in',
                    'value': 'arraySizeInSamps'
                },
                'type': 'uInt16[]'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInSamps',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanRead',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadDigitalU32': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'fillMode',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'readArray',
                'size': {
                    'mechanism': 'passed-in',
                    'value': 'arraySizeInSamps'
                },
                'type': 'uInt32[]'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInSamps',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanRead',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadDigitalU8': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'fillMode',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'readArray',
                'size': {
                    'mechanism': 'passed-in',
                    'value': 'arraySizeInSamps'
                },
                'type': 'uInt8[]'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInSamps',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanRead',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadPowerBinaryI16': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'fillMode',
                'type': 'int32'
            },
            {
                'coerced': True,
                'direction': 'out',
                'name': 'readArrayVoltage',
                'size': {
                    'mechanism': 'passed-in',
                    'value': 'arraySizeInSamps'
                },
                'type': 'int16[]'
            },
            {
                'coerced': True,
                'direction': 'out',
                'name': 'readArrayCurrent',
                'size': {
                    'mechanism': 'passed-in',
                    'value': 'arraySizeInSamps'
                },
                'type': 'int16[]'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInSamps',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanRead',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadPowerF64': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'fillMode',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'readArrayVoltage',
                'size': {
                    'mechanism': 'passed-in',
                    'value': 'arraySizeInSamps'
                },
                'type': 'float64[]'
            },
            {
                'direction': 'out',
                'name': 'readArrayCurrent',
                'size': {
                    'mechanism': 'passed-in',
                    'value': 'arraySizeInSamps'
                },
                'type': 'float64[]'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInSamps',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanRead',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadPowerScalarF64': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'out',
                'name': 'voltage',
                'type': 'float64'
            },
            {
                'direction': 'out',
                'name': 'current',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ReadRaw': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'out',
                'name': 'readArray',
                'size': {
                    'mechanism': 'passed-in',
                    'value': 'arraySizeInBytes'
                },
                'type': 'uInt8[]'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInBytes',
                'type': 'uInt32'
            },
            {
                'direction': 'out',
                'name': 'sampsRead',
                'type': 'int32'
            },
            {
                'direction': 'out',
                'name': 'numBytesPerSamp',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'RegisterDoneEvent': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'options',
                'type': 'uInt32'
            },
            {
                'callback_params': [
                    {
                        'direction': 'out',
                        'include_in_proto': False,
                        'name': 'task',
                        'type': 'TaskHandle'
                    },
                    {
                        'direction': 'out',
                        'name': 'status',
                        'type': 'int32'
                    }
                ],
                'direction': 'in',
                'include_in_proto': False,
                'name': 'callbackFunction',
                'type': 'DAQmxDoneEventCallbackPtr'
            },
            {
                'callback_token': True,
                'direction': 'in',
                'include_in_proto': False,
                'name': 'callbackData',
                'pointer': True,
                'type': 'void'
            }
        ],
        'returns': 'int32',
        'stream_response': True
    },
    'RegisterEveryNSamplesEvent': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'EveryNSamplesEventType',
                'name': 'everyNSamplesEventType',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'nSamples',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'options',
                'type': 'uInt32'
            },
            {
                'callback_params': [
                    {
                        'direction': 'out',
                        'include_in_proto': False,
                        'name': 'task',
                        'type': 'TaskHandle'
                    },
                    {
                        'direction': 'out',
                        'enum': 'EveryNSamplesEventType',
                        'name': 'everyNSamplesEventType',
                        'type': 'int32'
                    },
                    {
                        'direction': 'out',
                        'name': 'nSamples',
                        'type': 'uInt32'
                    }
                ],
                'direction': 'in',
                'include_in_proto': False,
                'name': 'callbackFunction',
                'type': 'DAQmxEveryNSamplesEventCallbackPtr'
            },
            {
                'callback_token': True,
                'direction': 'in',
                'include_in_proto': False,
                'name': 'callbackData',
                'pointer': True,
                'type': 'void'
            }
        ],
        'returns': 'int32',
        'stream_response': True
    },
    'RegisterSignalEvent': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Signal2',
                'name': 'signalID',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'options',
                'type': 'uInt32'
            },
            {
                'callback_params': [
                    {
                        'direction': 'out',
                        'include_in_proto': False,
                        'name': 'task',
                        'type': 'TaskHandle'
                    },
                    {
                        'direction': 'out',
                        'name': 'signalID',
                        'type': 'int32'
                    }
                ],
                'direction': 'in',
                'include_in_proto': False,
                'name': 'callbackFunction',
                'type': 'DAQmxSignalEventCallbackPtr'
            },
            {
                'callback_token': True,
                'direction': 'in',
                'include_in_proto': False,
                'name': 'callbackData',
                'pointer': True,
                'type': 'void'
            }
        ],
        'returns': 'int32',
        'stream_response': True
    },
    'RemoveCDAQSyncConnection': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'portList',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ReserveNetworkDevice': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'overrideReservation',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIACExcitFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIACExcitSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIACExcitWireMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIADCCustomTimingMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIADCTimingMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIAccel4WireDCVoltageSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIAccel4WireDCVoltageSensitivityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIAccelChargeSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIAccelChargeSensitivityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIAccelSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIAccelSensitivityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIAccelUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIAcceldBRef': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIAtten': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIAutoZeroMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIAveragingWinSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgeBalanceCoarsePot': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgeBalanceFinePot': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgeCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgeElectricalUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgeInitialRatio': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgeInitialVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgeNomResistance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgePhysicalUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgePolyForwardCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgePolyReverseCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgeScaleType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgeShuntCalEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgeShuntCalGainAdjust': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgeShuntCalSelect': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgeShuntCalShuntCalAActualResistance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgeShuntCalShuntCalAResistance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgeShuntCalShuntCalASrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgeShuntCalShuntCalBActualResistance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgeShuntCalShuntCalBResistance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgeTableElectricalVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgeTablePhysicalVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgeTwoPointLinFirstElectricalVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgeTwoPointLinFirstPhysicalVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgeTwoPointLinSecondElectricalVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgeTwoPointLinSecondPhysicalVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIBridgeUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIChanCalApplyCalIfExp': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIChanCalDesc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIChanCalEnableCal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIChanCalOperatorName': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIChanCalPolyForwardCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIChanCalPolyReverseCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIChanCalScaleType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIChanCalTablePreScaledVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIChanCalTableScaledVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIChanCalVerifAcqVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIChanCalVerifRefVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIChargeUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIChopEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIConvActiveEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIConvActiveEdgeEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIConvDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIConvDigFltrEnableEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIConvDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIConvDigFltrMinPulseWidthEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIConvDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIConvDigFltrTimebaseRateEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIConvDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIConvDigFltrTimebaseSrcEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIConvDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIConvDigSyncEnableEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIConvRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIConvRateEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIConvSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIConvSrcEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIConvTimebaseDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIConvTimebaseDivEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIConvTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIConvTimebaseSrcEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAICoupling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAICurrentACRMSUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAICurrentShuntLoc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAICurrentShuntResistance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAICurrentUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAICustomScaleName': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIDCOffset': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIDataXferCustomThreshold': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIDataXferMaxRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIDataXferMech': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIDataXferReqCond': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIDigFltrBandpassCenterFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIDigFltrBandpassWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIDigFltrCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIDigFltrHighpassCutoffFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIDigFltrLowpassCutoffFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIDigFltrNotchCenterFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIDigFltrNotchWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIDigFltrOrder': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIDigFltrResponse': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIDigFltrType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIDitherEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIEddyCurrentProxProbeSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIEddyCurrentProxProbeSensitivityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIEddyCurrentProxProbeUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIEnhancedAliasRejectionEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIExcitActualVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIExcitDCorAC': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIExcitIdleOutputBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIExcitSense': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIExcitSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIExcitUseForScaling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIExcitUseMultiplexed': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIExcitVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIExcitVoltageOrCurrent': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIFilterDelayAdjustment': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIFilterDelayUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIFilterEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIFilterFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIFilterOrder': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIFilterResponse': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIForceIEPESensorSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIForceIEPESensorSensitivityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIForceReadFromChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIForceUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIFreqHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIFreqThreshVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIFreqUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIGain': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIImpedance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIInputLimitsFaultDetectEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIInputLimitsFaultDetectLowerLimit': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIInputLimitsFaultDetectUpperLimit': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIInputSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAILVDTSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAILVDTSensitivityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAILVDTUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAILeadWireResistance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAILossyLSBRemovalCompressedSampSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAILowpassCutoffFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAILowpassEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAILowpassSwitchCapClkSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAILowpassSwitchCapExtClkDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAILowpassSwitchCapExtClkFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAILowpassSwitchCapOutClkDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIMax': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIMemMapEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIMicrophoneSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIMin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIOpenChanDetectEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIOpenThrmcplDetectEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIOvercurrentDetectEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIPowerSupplyFaultDetectEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIPressureUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIProbeAtten': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIRTDA': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIRTDB': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIRTDC': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIRTDR0': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIRTDType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIRVDTSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIRVDTSensitivityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIRVDTUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIRawDataCompressionType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIRemoveFilterDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIResistanceCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIResistanceUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIRngHigh': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIRngLow': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIRosetteStrainGageOrientation': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIRosetteStrainGageRosetteMeasType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAISampAndHoldEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAISensorPowerCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAISensorPowerType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAISensorPowerVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAISoundPressureMaxSoundPressureLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAISoundPressureUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAISoundPressuredBRef': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIStrainGageCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIStrainGageForceReadFromChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIStrainGageGageFactor': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIStrainGagePoissonRatio': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIStrainUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAITempUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAITermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIThrmcplCJCVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIThrmcplLeadOffsetVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIThrmcplScaleType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIThrmcplType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIThrmstrA': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIThrmstrB': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIThrmstrC': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIThrmstrR1': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAITorqueUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIUsbXferReqCount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIUsbXferReqSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIVelocityIEPESensorSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIVelocityIEPESensorSensitivityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIVelocityIEPESensordBRef': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIVelocityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIVoltageACRMSUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIVoltageUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAIVoltagedBRef': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOCommonModeOffset': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOCurrentUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOCustomScaleName': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAODACOffsetExtSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAODACOffsetSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAODACOffsetVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAODACRefAllowConnToGnd': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAODACRefConnToGnd': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAODACRefExtSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAODACRefSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAODACRefVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAODACRngHigh': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAODACRngLow': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAODataXferMech': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAODataXferReqCond': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOEnhancedImageRejectionEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOFilterDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOFilterDelayAdjustment': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOFilterDelayUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOFuncGenAmplitude': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOFuncGenFMDeviation': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOFuncGenFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOFuncGenModulationType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOFuncGenOffset': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOFuncGenSquareDutyCycle': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOFuncGenStartPhase': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOFuncGenType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOGain': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOIdleOutputBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOLoadImpedance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOMax': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOMemMapEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOMin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOOutputImpedance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOPowerAmpChannelEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOReglitchEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOResolutionUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOUsbXferReqCount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOUsbXferReqSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOUseOnlyOnBrdMem': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOVoltageCurrentLimit': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAOVoltageUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetAdvTrigType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgEdgeRefTrigCoupling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgEdgeRefTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgEdgeRefTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgEdgeRefTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgEdgeRefTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgEdgeRefTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgEdgeRefTrigHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgEdgeRefTrigLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgEdgeRefTrigSlope': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgEdgeRefTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgEdgeStartTrigCoupling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgEdgeStartTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgEdgeStartTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgEdgeStartTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgEdgeStartTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgEdgeStartTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgEdgeStartTrigHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgEdgeStartTrigLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgEdgeStartTrigSlope': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgEdgeStartTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgLvlPauseTrigCoupling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgLvlPauseTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgLvlPauseTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgLvlPauseTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgLvlPauseTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgLvlPauseTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgLvlPauseTrigHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgLvlPauseTrigLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgLvlPauseTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgLvlPauseTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgMultiEdgeRefTrigCouplings': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgMultiEdgeRefTrigHysts': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgMultiEdgeRefTrigLvls': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgMultiEdgeRefTrigSlopes': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgMultiEdgeRefTrigSrcs': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgMultiEdgeStartTrigCouplings': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgMultiEdgeStartTrigHysts': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgMultiEdgeStartTrigLvls': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgMultiEdgeStartTrigSlopes': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgMultiEdgeStartTrigSrcs': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinPauseTrigBtm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinPauseTrigCoupling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinPauseTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinPauseTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinPauseTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinPauseTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinPauseTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinPauseTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinPauseTrigTop': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinPauseTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinRefTrigBtm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinRefTrigCoupling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinRefTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinRefTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinRefTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinRefTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinRefTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinRefTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinRefTrigTop': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinRefTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinStartTrigBtm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinStartTrigCoupling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinStartTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinStartTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinStartTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinStartTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinStartTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinStartTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinStartTrigTop': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetAnlgWinStartTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetArmStartTrigTimescale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetArmStartTrigTimestampEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetArmStartTrigTimestampTimescale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetArmStartTrigTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetArmStartTrigType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetBufInputBufSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetBufOutputBufSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetBufOutputOnbrdBufSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetBufferAttribute': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'BufferAttribute',
                'name': 'attribute',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIAngEncoderInitialAngle': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIAngEncoderPulsesPerRev': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIAngEncoderUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesActiveEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesCountDirDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesCountDirDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesCountDirDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesCountDirDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesCountDirDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesCountDirHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesCountDirLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesCountDirTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesCountDirThreshVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesCountResetActiveEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesCountResetDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesCountResetDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesCountResetDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesCountResetDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesCountResetDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesCountResetEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesCountResetHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesCountResetLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesCountResetResetCount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesCountResetTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesCountResetTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesCountResetThreshVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesDir': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesDirTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesGateDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesGateDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesGateDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesGateDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesGateEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesGateHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesGateLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesGateTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesGateTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesGateThreshVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesGateWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesInitialCnt': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICountEdgesThreshVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICtrTimebaseActiveEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICtrTimebaseDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICtrTimebaseDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICtrTimebaseDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICtrTimebaseDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICtrTimebaseDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICtrTimebaseMasterTimebaseDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICtrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICtrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCICustomScaleName': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIDataXferMech': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIDataXferReqCond': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIDupCountPrevent': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIDutyCycleDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIDutyCycleDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIDutyCycleDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIDutyCycleDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIDutyCycleLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIDutyCycleStartingEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIDutyCycleTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIDutyCycleTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderAInputDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderAInputDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderAInputDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderAInputDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderAInputDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderAInputLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderAInputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderAInputTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderBInputDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderBInputDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderBInputDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderBInputDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderBInputDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderBInputLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderBInputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderBInputTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderDecodingType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderZIndexEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderZIndexPhase': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderZIndexVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderZInputDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderZInputDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderZInputDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderZInputDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderZInputDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderZInputLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderZInputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIEncoderZInputTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIFilterDelayUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIFilterEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIFilterFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIFilterOrder': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIFilterResponse': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIFreqDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIFreqDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIFreqDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIFreqDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIFreqDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIFreqDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIFreqEnableAveraging': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIFreqHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIFreqLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIFreqMeasMeth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIFreqMeasTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIFreqStartingEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIFreqTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIFreqTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIFreqThreshVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIFreqUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIGPSSyncMethod': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIGPSSyncSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCILinEncoderDistPerPulse': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCILinEncoderInitialPos': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCILinEncoderUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIMax': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIMaxMeasPeriod': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIMemMapEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIMin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPeriodDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPeriodDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPeriodDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPeriodDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPeriodDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPeriodDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPeriodEnableAveraging': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPeriodHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPeriodLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPeriodMeasMeth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPeriodMeasTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPeriodStartingEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPeriodTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPeriodTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPeriodThreshVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPeriodUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPrescaler': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseFreqDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseFreqDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseFreqDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseFreqDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseFreqDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseFreqLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseFreqStartEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseFreqTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseFreqTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseFreqUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseTicksDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseTicksDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseTicksDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseTicksDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseTicksDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseTicksLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseTicksStartEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseTicksTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseTicksTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseTimeDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseTimeDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseTimeDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseTimeDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseTimeDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseTimeLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseTimeStartEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseTimeTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseTimeTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseTimeUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseWidthDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseWidthDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseWidthDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseWidthDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseWidthDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseWidthLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseWidthStartingEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseWidthTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseWidthTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIPulseWidthUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCISampClkOverrunBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCISampClkOverrunSentinelVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCISemiPeriodDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCISemiPeriodDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCISemiPeriodDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCISemiPeriodDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCISemiPeriodDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCISemiPeriodLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCISemiPeriodStartingEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCISemiPeriodTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCISemiPeriodTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCISemiPeriodUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIThreshVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCITimestampInitialSeconds': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCITimestampUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCITwoEdgeSepFirstDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCITwoEdgeSepFirstDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCITwoEdgeSepFirstDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCITwoEdgeSepFirstDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCITwoEdgeSepFirstDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCITwoEdgeSepFirstEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCITwoEdgeSepFirstLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCITwoEdgeSepFirstTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCITwoEdgeSepFirstTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCITwoEdgeSepSecondDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCITwoEdgeSepSecondDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCITwoEdgeSepSecondDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCITwoEdgeSepSecondDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCITwoEdgeSepSecondDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCITwoEdgeSepSecondEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCITwoEdgeSepSecondLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCITwoEdgeSepSecondTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCITwoEdgeSepSecondTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCITwoEdgeSepUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIUsbXferReqCount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIUsbXferReqSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIVelocityAngEncoderPulsesPerRev': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIVelocityAngEncoderUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIVelocityDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIVelocityEncoderAInputDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIVelocityEncoderAInputDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIVelocityEncoderAInputDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIVelocityEncoderAInputDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIVelocityEncoderAInputLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIVelocityEncoderAInputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIVelocityEncoderAInputTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIVelocityEncoderBInputDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIVelocityEncoderBInputDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIVelocityEncoderBInputDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIVelocityEncoderBInputDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIVelocityEncoderBInputLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIVelocityEncoderBInputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIVelocityEncoderBInputTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIVelocityEncoderDecodingType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIVelocityLinEncoderDistPerPulse': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIVelocityLinEncoderUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCIVelocityMeasTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOAutoIncrCnt': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOConstrainedGenMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOCtrTimebaseActiveEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOCtrTimebaseDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOCtrTimebaseDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOCtrTimebaseDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOCtrTimebaseDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOCtrTimebaseDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOCtrTimebaseMasterTimebaseDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOCtrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOCtrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCODataXferMech': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCODataXferReqCond': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOEnableInitialDelayOnRetrigger': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOMemMapEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOPrescaler': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOPulseDutyCyc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOPulseFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOPulseFreqInitialDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOPulseFreqUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOPulseHighTicks': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOPulseHighTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOPulseIdleState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOPulseLowTicks': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOPulseLowTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOPulseTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOPulseTicksInitialDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOPulseTimeInitialDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOPulseTimeUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOUsbXferReqCount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOUsbXferReqSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetCOUseOnlyOnBrdMem': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetChanAttribute': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'ChannelAttribute',
                'name': 'attribute',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'ResetChanDescr': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetChanSyncUnlockBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetChangeDetectDIFallingEdgePhysicalChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetChangeDetectDIRisingEdgePhysicalChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetChangeDetectDITristate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDIAcquireOn': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDIDataXferMech': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDIDataXferReqCond': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDIDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDIDigFltrEnableBusMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDIDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDIDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDIDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDIDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDIInvertLines': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDILogicFamily': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDIMemMapEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDITristate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDIUsbXferReqCount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDIUsbXferReqSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDODataXferMech': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDODataXferReqCond': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDOGenerateOn': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDOInvertLines': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDOLineStatesDoneState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDOLineStatesPausedState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDOLineStatesStartState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDOLogicFamily': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDOMemMapEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDOOutputDriveType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDOOvercurrentAutoReenable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDOOvercurrentLimit': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDOOvercurrentReenablePeriod': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDOTristate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDOUsbXferReqCount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDOUsbXferReqSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDOUseOnlyOnBrdMem': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDelayFromSampClkDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDelayFromSampClkDelayEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDelayFromSampClkDelayUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDelayFromSampClkDelayUnitsEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDevice': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeAdvTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeAdvTrigEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeAdvTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeArmStartTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeArmStartTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeArmStartTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeArmStartTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeArmStartTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeArmStartTrigEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeArmStartTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeRefTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeRefTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeRefTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeRefTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeRefTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeRefTrigEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeRefTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeStartTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeStartTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeStartTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeStartTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeStartTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeStartTrigEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeStartTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeWatchdogExpirTrigEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigEdgeWatchdogExpirTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigLvlPauseTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigLvlPauseTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigLvlPauseTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigLvlPauseTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigLvlPauseTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigLvlPauseTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigLvlPauseTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigPatternPauseTrigPattern': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigPatternPauseTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigPatternPauseTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigPatternRefTrigPattern': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigPatternRefTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigPatternRefTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigPatternStartTrigPattern': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigPatternStartTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetDigPatternStartTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExported10MHzRefClkOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExported20MHzTimebaseOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedAIConvClkOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedAIHoldCmpltEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedAIHoldCmpltEventPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedAdvCmpltEventDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedAdvCmpltEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedAdvCmpltEventPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedAdvCmpltEventPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedAdvTrigOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedAdvTrigPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedAdvTrigPulseWidthUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedChangeDetectEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedChangeDetectEventPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedCtrOutEventOutputBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedCtrOutEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedCtrOutEventPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedCtrOutEventToggleIdleState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedDataActiveEventLvlActiveLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedDataActiveEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedDividedSampClkTimebaseOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedHshkEventDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedHshkEventInterlockedAssertOnStart': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedHshkEventInterlockedAssertedLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedHshkEventInterlockedDeassertDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedHshkEventOutputBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedHshkEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedHshkEventPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedHshkEventPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedPauseTrigLvlActiveLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedPauseTrigOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedRdyForStartEventLvlActiveLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedRdyForStartEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedRdyForXferEventDeassertCond': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedRdyForXferEventDeassertCondCustomThreshold': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedRdyForXferEventLvlActiveLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedRdyForXferEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedRefTrigOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedRefTrigPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedSampClkDelayOffset': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedSampClkOutputBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedSampClkOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedSampClkPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedSampClkTimebaseOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedSignalAttribute': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'ExportSignalAttribute',
                'name': 'attribute',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedStartTrigOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedStartTrigPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedSyncPulseEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetExportedWatchdogExpiredEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetFirstSampClkOffset': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetFirstSampClkTimescale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetFirstSampClkWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetFirstSampTimestampEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetFirstSampTimestampTimescale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetHshkDelayAfterXfer': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetHshkSampleInputDataWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetHshkStartCond': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetHshkTrigType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetImplicitUnderflowBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetInterlockedHshkTrigAssertedLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetInterlockedHshkTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetLoggingFilePath': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetLoggingFilePreallocationSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetLoggingFileWriteSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetLoggingMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetLoggingPause': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetLoggingSampsPerFile': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetLoggingTDMSGroupName': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetLoggingTDMSOperation': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetMasterTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetMasterTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetOnDemandSimultaneousAOEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetPauseTrigType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetPhysicalChanAIPowerControlEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetPhysicalChanAIPowerControlType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetPhysicalChanAIPowerControlVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetPhysicalChanAOManualControlEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetPwrCurrentSetpoint': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetPwrIdleOutputBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetPwrOutputEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetPwrRemoteSense': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetPwrVoltageSetpoint': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetReadAttribute': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'ReadAttribute',
                'name': 'attribute',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'ResetReadAutoStart': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetReadChannelsToRead': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetReadOffset': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetReadOverWrite': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetReadReadAllAvailSamp': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetReadRelativeTo': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetReadSleepTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetReadWaitMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetRealTimeAttribute': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'RealTimeAttribute',
                'name': 'attribute',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'ResetRealTimeConvLateErrorsToWarnings': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetRealTimeNumOfWarmupIters': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetRealTimeReportMissedSamp': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetRealTimeWaitForNextSampClkWaitMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetRealTimeWriteRecoveryMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetRefClkRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetRefClkSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetRefTrigAutoTrigEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetRefTrigDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetRefTrigMaxNumTrigsToDetect': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetRefTrigPretrigSamples': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetRefTrigRetriggerWin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetRefTrigRetriggerable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetRefTrigTimestampEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetRefTrigTimestampTimescale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetRefTrigTrigWin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetRefTrigType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSampClkActiveEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSampClkDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSampClkDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSampClkDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSampClkDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSampClkDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSampClkOverrunBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSampClkRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSampClkSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSampClkTimebaseActiveEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSampClkTimebaseDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSampClkTimebaseMasterTimebaseDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSampClkTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSampClkTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSampClkTimingResponseMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSampClkUnderflowBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSampClkWriteWfmUseInitialWfmDT': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSampQuantSampMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSampQuantSampPerChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSampTimingEngine': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSampTimingType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetStartTrigDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetStartTrigDelayUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetStartTrigMaxNumTrigsToDetect': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetStartTrigRetriggerWin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetStartTrigRetriggerable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetStartTrigTimescale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetStartTrigTimestampEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetStartTrigTimestampTimescale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetStartTrigTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetStartTrigTrigWin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetStartTrigType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSwitchScanBreakMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSwitchScanRepeatMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSyncClkInterval': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSyncPulseMinDelayToStart': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSyncPulseResetDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSyncPulseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSyncPulseTimeTimescale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSyncPulseTimeWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetSyncPulseType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetTimingAttribute': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'ResetTimingAttributeEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'ResetTrigAttribute': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TriggerAttribute',
                'name': 'attribute',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'ResetTriggerSyncType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetWatchdogAOExpirState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'lines',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetWatchdogAOOutputType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'lines',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetWatchdogAttribute': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'lines',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'WatchdogAttribute',
                'name': 'attribute',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'ResetWatchdogCOExpirState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'lines',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetWatchdogDOExpirState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'lines',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'ResetWatchdogExpirTrigTrigOnNetworkConnLoss': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetWatchdogExpirTrigType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetWatchdogTimeout': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetWriteAttribute': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'WriteAttribute',
                'name': 'attribute',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'ResetWriteOffset': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetWriteRegenMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetWriteRelativeTo': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetWriteSleepTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'ResetWriteWaitMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'RestoreLastExtCalConst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'SaveGlobalChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channelName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'saveAs',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'author',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'SaveOptions',
                'name': 'options',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SaveScale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'saveAs',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'author',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'SaveOptions',
                'name': 'options',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SaveTask': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'saveAs',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'author',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'SaveOptions',
                'name': 'options',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SelfCal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'SelfTestDevice': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'SetAIACExcitFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIACExcitSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIACExcitWireMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'ACExcitWireMode',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIADCCustomTimingMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIADCTimingMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'ADCTimingMode',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIAccel4WireDCVoltageSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIAccel4WireDCVoltageSensitivityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'AccelSensitivityUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIAccelChargeSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIAccelChargeSensitivityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'AccelChargeSensitivityUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIAccelSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIAccelSensitivityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'AccelSensitivityUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIAccelUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'AccelUnits2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIAcceldBRef': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIAtten': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIAutoZeroMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'AutoZeroType1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIAveragingWinSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgeBalanceCoarsePot': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgeBalanceFinePot': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgeCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'BridgeConfiguration1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgeElectricalUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'BridgeElectricalUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgeInitialRatio': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgeInitialVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgeNomResistance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgePhysicalUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'BridgePhysicalUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgePolyForwardCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgePolyReverseCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgeScaleType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'ScaleType4',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgeShuntCalEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgeShuntCalGainAdjust': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgeShuntCalSelect': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'ShuntCalSelect',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgeShuntCalShuntCalAActualResistance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgeShuntCalShuntCalAResistance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgeShuntCalShuntCalASrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'BridgeShuntCalSource',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgeShuntCalShuntCalBActualResistance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgeShuntCalShuntCalBResistance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgeTableElectricalVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgeTablePhysicalVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgeTwoPointLinFirstElectricalVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgeTwoPointLinFirstPhysicalVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgeTwoPointLinSecondElectricalVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgeTwoPointLinSecondPhysicalVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIBridgeUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'BridgeUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIChanCalApplyCalIfExp': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIChanCalCalDate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channelName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'year',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'name': 'month',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'name': 'day',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'name': 'hour',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'name': 'minute',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIChanCalDesc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAIChanCalEnableCal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIChanCalExpDate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channelName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'year',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'name': 'month',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'name': 'day',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'name': 'hour',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'name': 'minute',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIChanCalOperatorName': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAIChanCalPolyForwardCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIChanCalPolyReverseCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIChanCalScaleType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'ScaleType3',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIChanCalTablePreScaledVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIChanCalTableScaledVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIChanCalVerifAcqVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIChanCalVerifRefVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIChargeUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'ChargeUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIChopEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIConvActiveEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIConvActiveEdgeEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIConvDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIConvDigFltrEnableEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIConvDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIConvDigFltrMinPulseWidthEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIConvDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIConvDigFltrTimebaseRateEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIConvDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAIConvDigFltrTimebaseSrcEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAIConvDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIConvDigSyncEnableEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIConvRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIConvRateEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIConvSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAIConvSrcEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAIConvTimebaseDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIConvTimebaseDivEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIConvTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'MIOAIConvertTbSrc',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIConvTimebaseSrcEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAICoupling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Coupling1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAICurrentACRMSUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'CurrentUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAICurrentShuntLoc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'CurrentShuntResistorLocation1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAICurrentShuntResistance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAICurrentUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'CurrentUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAICustomScaleName': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAIDCOffset': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIDataXferCustomThreshold': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIDataXferMaxRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIDataXferMech': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'DataTransferMechanism',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIDataXferReqCond': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputDataTransferCondition',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIDigFltrBandpassCenterFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIDigFltrBandpassWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIDigFltrCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIDigFltrHighpassCutoffFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIDigFltrLowpassCutoffFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIDigFltrNotchCenterFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIDigFltrNotchWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIDigFltrOrder': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIDigFltrResponse': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'FilterResponse',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIDigFltrType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'FilterType2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIDitherEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIEddyCurrentProxProbeSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIEddyCurrentProxProbeSensitivityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'EddyCurrentProxProbeSensitivityUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIEddyCurrentProxProbeUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LengthUnits2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIEnhancedAliasRejectionEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIExcitActualVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIExcitDCorAC': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationDCorAC',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIExcitIdleOutputBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationIdleOutputBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIExcitSense': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Sense',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIExcitSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationSource',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIExcitUseForScaling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIExcitUseMultiplexed': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIExcitVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIExcitVoltageOrCurrent': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'ExcitationVoltageOrCurrent',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIFilterDelayAdjustment': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIFilterDelayUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'DigitalWidthUnits4',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIFilterEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIFilterFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIFilterOrder': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIFilterResponse': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'FilterResponse1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIForceIEPESensorSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIForceIEPESensorSensitivityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'ForceIEPESensorSensitivityUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIForceReadFromChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIForceUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'ForceUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIFreqHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIFreqThreshVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIFreqUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'FrequencyUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIGain': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIImpedance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Impedance1',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIInputLimitsFaultDetectEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIInputLimitsFaultDetectLowerLimit': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIInputLimitsFaultDetectUpperLimit': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIInputSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAILVDTSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAILVDTSensitivityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LVDTSensitivityUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAILVDTUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LengthUnits2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAILeadWireResistance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAILossyLSBRemovalCompressedSampSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAILowpassCutoffFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAILowpassEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAILowpassSwitchCapClkSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'SourceSelection',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAILowpassSwitchCapExtClkDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAILowpassSwitchCapExtClkFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAILowpassSwitchCapOutClkDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIMax': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIMemMapEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIMicrophoneSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIMin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIOpenChanDetectEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIOpenThrmcplDetectEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIOvercurrentDetectEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIPowerSupplyFaultDetectEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIPressureUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'PressureUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIProbeAtten': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIRTDA': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIRTDB': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIRTDC': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIRTDR0': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIRTDType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'RTDType1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIRVDTSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIRVDTSensitivityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'RVDTSensitivityUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIRVDTUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'AngleUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIRawDataCompressionType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'RawDataCompressionType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIRemoveFilterDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIResistanceCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'ResistanceConfiguration',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIResistanceUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'ResistanceUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIRngHigh': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIRngLow': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIRosetteStrainGageOrientation': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIRosetteStrainGageRosetteMeasType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'StrainGageRosetteMeasurementType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAISampAndHoldEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAISensorPowerCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'SensorPowerCfg',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAISensorPowerType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'SensorPowerType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAISensorPowerVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAISoundPressureMaxSoundPressureLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAISoundPressureUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'SoundPressureUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAISoundPressuredBRef': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIStrainGageCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'StrainGageBridgeType1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIStrainGageForceReadFromChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIStrainGageGageFactor': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIStrainGagePoissonRatio': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIStrainUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'StrainUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAITempUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'TemperatureUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAITermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfg',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIThrmcplCJCVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIThrmcplLeadOffsetVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIThrmcplScaleType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'ScaleType2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIThrmcplType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'ThermocoupleType1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIThrmstrA': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIThrmstrB': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIThrmstrC': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIThrmstrR1': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAITorqueUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'TorqueUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIUsbXferReqCount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIUsbXferReqSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIVelocityIEPESensorSensitivity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIVelocityIEPESensorSensitivityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'VelocityIEPESensorSensitivityUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIVelocityIEPESensordBRef': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAIVelocityUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'VelocityUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIVoltageACRMSUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'VoltageUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIVoltageUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'VoltageUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAIVoltagedBRef': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAOCommonModeOffset': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAOCurrentUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'CurrentUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAOCustomScaleName': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAODACOffsetExtSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAODACOffsetSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'SourceSelection',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAODACOffsetVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAODACRefAllowConnToGnd': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAODACRefConnToGnd': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAODACRefExtSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAODACRefSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'SourceSelection',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAODACRefVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAODACRngHigh': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAODACRngLow': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAODataXferMech': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'DataTransferMechanism',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAODataXferReqCond': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'OutputDataTransferCondition',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAOEnhancedImageRejectionEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAOFilterDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAOFilterDelayAdjustment': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAOFilterDelayUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'DigitalWidthUnits4',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAOFuncGenAmplitude': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAOFuncGenFMDeviation': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAOFuncGenFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAOFuncGenModulationType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'ModulationType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAOFuncGenOffset': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAOFuncGenSquareDutyCycle': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAOFuncGenStartPhase': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAOFuncGenType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'FuncGenType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAOGain': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAOIdleOutputBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'AOIdleOutputBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAOLoadImpedance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAOMax': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAOMemMapEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAOMin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAOOutputImpedance': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAOPowerAmpChannelEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAOReglitchEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAOResolutionUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'ResolutionType1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAOTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'OutputTermCfg',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAOUsbXferReqCount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAOUsbXferReqSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAOUseOnlyOnBrdMem': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAOVoltageCurrentLimit': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAOVoltageUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'VoltageUnits2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAdvTrigType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'TriggerType5',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnalogPowerUpStates': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'include_in_proto': False,
                'name': 'channelNames',
                'repeating_argument': True,
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'include_in_proto': False,
                'name': 'state',
                'repeating_argument': True,
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'PowerUpChannelType',
                'include_in_proto': False,
                'name': 'channelType',
                'repeating_argument': True,
                'type': 'int32'
            },
            {
                'direction': 'in',
                'grpc_type': 'repeated AnalogPowerUpChannelsAndState',
                'is_compound_type': True,
                'max_length': 96,
                'name': 'powerUpStates',
                'repeated_var_args': True
            }
        ],
        'returns': 'int32'
    },
    'SetAnalogPowerUpStatesWithOutputType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'channelNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'stateArray',
                'size': {
                    'mechanism': 'len',
                    'value': 'arraySize'
                },
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'enum': 'PowerUpChannelType',
                'name': 'channelTypeArray',
                'size': {
                    'mechanism': 'len',
                    'value': 'arraySize'
                },
                'type': 'const int32[]'
            },
            {
                'direction': 'in',
                'name': 'arraySize',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgEdgeRefTrigCoupling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Coupling2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgEdgeRefTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgEdgeRefTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgEdgeRefTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgEdgeRefTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgEdgeRefTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgEdgeRefTrigHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgEdgeRefTrigLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgEdgeRefTrigSlope': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Slope1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgEdgeRefTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgEdgeStartTrigCoupling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Coupling2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgEdgeStartTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgEdgeStartTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgEdgeStartTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgEdgeStartTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgEdgeStartTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgEdgeStartTrigHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgEdgeStartTrigLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgEdgeStartTrigSlope': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Slope1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgEdgeStartTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgLvlPauseTrigCoupling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Coupling2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgLvlPauseTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgLvlPauseTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgLvlPauseTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgLvlPauseTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgLvlPauseTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgLvlPauseTrigHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgLvlPauseTrigLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgLvlPauseTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgLvlPauseTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'ActiveLevel',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgMultiEdgeRefTrigCouplings': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'Coupling2',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgMultiEdgeRefTrigHysts': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgMultiEdgeRefTrigLvls': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgMultiEdgeRefTrigSlopes': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'Slope1',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgMultiEdgeRefTrigSrcs': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgMultiEdgeStartTrigCouplings': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'Coupling2',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgMultiEdgeStartTrigHysts': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgMultiEdgeStartTrigLvls': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgMultiEdgeStartTrigSlopes': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'enum': 'Slope1',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgMultiEdgeStartTrigSrcs': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinPauseTrigBtm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinPauseTrigCoupling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Coupling2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinPauseTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinPauseTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinPauseTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinPauseTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinPauseTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinPauseTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinPauseTrigTop': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinPauseTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'WindowTriggerCondition2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinRefTrigBtm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinRefTrigCoupling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Coupling2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinRefTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinRefTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinRefTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinRefTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinRefTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinRefTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinRefTrigTop': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinRefTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'WindowTriggerCondition1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinStartTrigBtm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinStartTrigCoupling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Coupling2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinStartTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinStartTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinStartTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinStartTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinStartTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinStartTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinStartTrigTop': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetAnlgWinStartTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'WindowTriggerCondition1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetArmStartTrigTimescale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Timescale2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetArmStartTrigTimestampEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetArmStartTrigTimestampTimescale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Timescale2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetArmStartTrigTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'CVIAbsoluteTime'
            }
        ],
        'returns': 'int32'
    },
    'SetArmStartTrigType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'TriggerType4',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetBufInputBufSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetBufOutputBufSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetBufOutputOnbrdBufSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetBufferAttributeUInt32': {
        'cname': 'DAQmxSetBufferAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'BufferAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIAngEncoderInitialAngle': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIAngEncoderPulsesPerRev': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIAngEncoderUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'AngleUnits2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesActiveEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesCountDirDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesCountDirDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesCountDirDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesCountDirDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesCountDirDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesCountDirHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesCountDirLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesCountDirTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesCountDirThreshVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesCountResetActiveEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesCountResetDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesCountResetDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesCountResetDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesCountResetDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesCountResetDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesCountResetEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesCountResetHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesCountResetLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesCountResetResetCount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesCountResetTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesCountResetTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesCountResetThreshVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesDir': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'CountDirection1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesDirTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesGateDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesGateDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesGateDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesGateDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesGateEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesGateHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesGateLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesGateTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesGateTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesGateThreshVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesGateWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Level1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesInitialCnt': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICountEdgesThreshVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCICtrTimebaseActiveEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICtrTimebaseDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICtrTimebaseDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCICtrTimebaseDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCICtrTimebaseDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCICtrTimebaseDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICtrTimebaseMasterTimebaseDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCICtrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCICtrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCICustomScaleName': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIDataXferMech': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'DataTransferMechanism',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIDataXferReqCond': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputDataTransferCondition',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIDupCountPrevent': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIDutyCycleDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIDutyCycleDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIDutyCycleDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIDutyCycleDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIDutyCycleLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIDutyCycleStartingEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIDutyCycleTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIDutyCycleTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderAInputDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderAInputDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderAInputDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderAInputDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderAInputDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderAInputLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderAInputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderAInputTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderBInputDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderBInputDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderBInputDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderBInputDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderBInputDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderBInputLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderBInputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderBInputTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderDecodingType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'EncoderType2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderZIndexEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderZIndexPhase': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'EncoderZIndexPhase1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderZIndexVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderZInputDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderZInputDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderZInputDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderZInputDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderZInputDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderZInputLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderZInputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIEncoderZInputTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIFilterDelayUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'DigitalWidthUnits4',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIFilterEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIFilterFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIFilterOrder': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIFilterResponse': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'FilterResponse1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIFreqDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIFreqDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIFreqDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIFreqDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIFreqDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIFreqDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIFreqEnableAveraging': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIFreqHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIFreqLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIFreqMeasMeth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'CounterFrequencyMethod',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIFreqMeasTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIFreqStartingEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIFreqTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIFreqTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIFreqThreshVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIFreqUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'FrequencyUnits3',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIGPSSyncMethod': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'GpsSignalType1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIGPSSyncSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCILinEncoderDistPerPulse': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCILinEncoderInitialPos': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCILinEncoderUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LengthUnits3',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIMax': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIMaxMeasPeriod': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIMemMapEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIMin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPeriodDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPeriodDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPeriodDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPeriodDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPeriodDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPeriodDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPeriodEnableAveraging': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPeriodHyst': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPeriodLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPeriodMeasMeth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'CounterFrequencyMethod',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPeriodMeasTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPeriodStartingEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPeriodTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPeriodTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPeriodThreshVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPeriodUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'TimeUnits3',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPrescaler': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseFreqDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseFreqDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseFreqDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseFreqDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseFreqDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseFreqLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseFreqStartEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseFreqTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseFreqTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseFreqUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'FrequencyUnits2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseTicksDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseTicksDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseTicksDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseTicksDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseTicksDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseTicksLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseTicksStartEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseTicksTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseTicksTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseTimeDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseTimeDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseTimeDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseTimeDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseTimeDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseTimeLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseTimeStartEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseTimeTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseTimeTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseTimeUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'TimeUnits2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseWidthDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseWidthDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseWidthDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseWidthDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseWidthDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseWidthLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseWidthStartingEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseWidthTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseWidthTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIPulseWidthUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'TimeUnits3',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCISampClkOverrunBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'SampClkOverrunBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCISampClkOverrunSentinelVal': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCISemiPeriodDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCISemiPeriodDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCISemiPeriodDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCISemiPeriodDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCISemiPeriodDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCISemiPeriodLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCISemiPeriodStartingEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCISemiPeriodTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCISemiPeriodTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCISemiPeriodUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'TimeUnits3',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIThreshVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCITimestampInitialSeconds': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCITimestampUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'TimeUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCITwoEdgeSepFirstDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCITwoEdgeSepFirstDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCITwoEdgeSepFirstDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCITwoEdgeSepFirstDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCITwoEdgeSepFirstDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCITwoEdgeSepFirstEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCITwoEdgeSepFirstLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCITwoEdgeSepFirstTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCITwoEdgeSepFirstTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCITwoEdgeSepSecondDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCITwoEdgeSepSecondDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCITwoEdgeSepSecondDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCITwoEdgeSepSecondDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCITwoEdgeSepSecondDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCITwoEdgeSepSecondEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCITwoEdgeSepSecondLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCITwoEdgeSepSecondTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCITwoEdgeSepSecondTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCITwoEdgeSepUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'TimeUnits3',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIUsbXferReqCount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIUsbXferReqSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIVelocityAngEncoderPulsesPerRev': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIVelocityAngEncoderUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'AngularVelocityUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIVelocityDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIVelocityEncoderAInputDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIVelocityEncoderAInputDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIVelocityEncoderAInputDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIVelocityEncoderAInputDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIVelocityEncoderAInputLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIVelocityEncoderAInputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIVelocityEncoderAInputTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIVelocityEncoderBInputDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIVelocityEncoderBInputDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIVelocityEncoderBInputDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIVelocityEncoderBInputDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIVelocityEncoderBInputLogicLvlBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LogicLvlBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIVelocityEncoderBInputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCIVelocityEncoderBInputTermCfg': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputTermCfg2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIVelocityEncoderDecodingType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'EncoderType2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIVelocityLinEncoderDistPerPulse': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCIVelocityLinEncoderUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'VelocityUnits',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCIVelocityMeasTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCOAutoIncrCnt': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCOConstrainedGenMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'ConstrainedGenMode',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCOCtrTimebaseActiveEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCOCtrTimebaseDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCOCtrTimebaseDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCOCtrTimebaseDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCOCtrTimebaseDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCOCtrTimebaseDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCOCtrTimebaseMasterTimebaseDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCOCtrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCOCtrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCODataXferMech': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'DataTransferMechanism',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCODataXferReqCond': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'OutputDataTransferCondition',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCOEnableInitialDelayOnRetrigger': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCOMemMapEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCOPrescaler': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCOPulseDutyCyc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCOPulseFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCOPulseFreqInitialDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCOPulseFreqUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'FrequencyUnits2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCOPulseHighTicks': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCOPulseHighTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCOPulseIdleState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Level1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCOPulseLowTicks': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCOPulseLowTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCOPulseTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetCOPulseTicksInitialDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCOPulseTimeInitialDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetCOPulseTimeUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'TimeUnits2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetCOUsbXferReqCount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCOUsbXferReqSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCOUseOnlyOnBrdMem': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetCalAccConnectionCount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCalInfoAttributeBool': {
        'cname': 'DAQmxSetCalInfoAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'CalibrationInfoAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCalInfoAttributeDouble': {
        'cname': 'DAQmxSetCalInfoAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'CalibrationInfoAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCalInfoAttributeString': {
        'cname': 'DAQmxSetCalInfoAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'CalibrationInfoAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCalInfoAttributeUInt32': {
        'cname': 'DAQmxSetCalInfoAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'CalibrationInfoAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetCalUserDefinedInfo': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetChanAttributeBool': {
        'cname': 'DAQmxSetChanAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'ChannelAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetChanAttributeDouble': {
        'cname': 'DAQmxSetChanAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'ChannelAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetChanAttributeDoubleArray': {
        'cname': 'DAQmxSetChanAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'ChannelAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'size': {
                    'mechanism': 'len',
                    'value': 'size'
                },
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetChanAttributeInt32': {
        'cname': 'DAQmxSetChanAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'ChannelAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetChanAttributeString': {
        'cname': 'DAQmxSetChanAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'ChannelAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetChanAttributeUInt32': {
        'cname': 'DAQmxSetChanAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'ChannelAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetChanDescr': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetChanSyncUnlockBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'SyncUnlockBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetChangeDetectDIFallingEdgePhysicalChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetChangeDetectDIRisingEdgePhysicalChans': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetChangeDetectDITristate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetDIAcquireOn': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'SampleClockActiveOrInactiveEdgeSelection',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetDIDataXferMech': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'DataTransferMechanism',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetDIDataXferReqCond': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'InputDataTransferCondition',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetDIDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetDIDigFltrEnableBusMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetDIDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetDIDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetDIDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetDIDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetDIInvertLines': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetDILogicFamily': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LogicFamily',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetDIMemMapEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetDITristate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetDIUsbXferReqCount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetDIUsbXferReqSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetDODataXferMech': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'DataTransferMechanism',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetDODataXferReqCond': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'OutputDataTransferCondition',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetDOGenerateOn': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'SampleClockActiveOrInactiveEdgeSelection',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetDOInvertLines': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetDOLineStatesDoneState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'DigitalLineState',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetDOLineStatesPausedState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'DigitalLineState',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetDOLineStatesStartState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'DigitalLineState',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetDOLogicFamily': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LogicFamily',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetDOMemMapEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetDOOutputDriveType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'DigitalDriveType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetDOOvercurrentAutoReenable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetDOOvercurrentLimit': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetDOOvercurrentReenablePeriod': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetDOTristate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetDOUsbXferReqCount': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetDOUsbXferReqSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetDOUseOnlyOnBrdMem': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetDelayFromSampClkDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetDelayFromSampClkDelayEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetDelayFromSampClkDelayUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'DigitalWidthUnits2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetDelayFromSampClkDelayUnitsEx': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeAdvTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeAdvTrigEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeAdvTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeArmStartTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeArmStartTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeArmStartTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeArmStartTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeArmStartTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeArmStartTrigEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeArmStartTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeRefTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeRefTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeRefTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeRefTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeRefTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeRefTrigEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeRefTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeStartTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeStartTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeStartTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeStartTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeStartTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeStartTrigEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeStartTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeWatchdogExpirTrigEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetDigEdgeWatchdogExpirTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetDigLvlPauseTrigDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetDigLvlPauseTrigDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetDigLvlPauseTrigDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetDigLvlPauseTrigDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetDigLvlPauseTrigDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetDigLvlPauseTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetDigLvlPauseTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Level1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetDigPatternPauseTrigPattern': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetDigPatternPauseTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetDigPatternPauseTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'DigitalPatternCondition1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetDigPatternRefTrigPattern': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetDigPatternRefTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetDigPatternRefTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'DigitalPatternCondition1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetDigPatternStartTrigPattern': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetDigPatternStartTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetDigPatternStartTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'DigitalPatternCondition1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetDigitalLogicFamilyPowerUpState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'LogicFamily',
                'name': 'logicFamily',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetDigitalPowerUpStates': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'include_in_proto': False,
                'name': 'channelNames',
                'repeating_argument': True,
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'PowerUpStates',
                'include_in_proto': False,
                'name': 'state',
                'repeating_argument': True,
                'type': 'int32'
            },
            {
                'direction': 'in',
                'grpc_type': 'repeated DigitalPowerUpChannelsAndState',
                'is_compound_type': True,
                'max_length': 96,
                'name': 'powerUpStates',
                'repeated_var_args': True
            }
        ],
        'returns': 'int32'
    },
    'SetDigitalPullUpPullDownStates': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'include_in_proto': False,
                'name': 'channelNames',
                'repeating_argument': True,
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'ResistorState',
                'include_in_proto': False,
                'name': 'state',
                'repeating_argument': True,
                'type': 'int32'
            },
            {
                'direction': 'in',
                'grpc_type': 'repeated DigitalPullUpPullDownChannelsAndState',
                'is_compound_type': True,
                'max_length': 96,
                'name': 'pullUpPullDownStates',
                'repeated_var_args': True
            }
        ],
        'returns': 'int32'
    },
    'SetExported10MHzRefClkOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetExported20MHzTimebaseOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedAIConvClkOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedAIHoldCmpltEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedAIHoldCmpltEventPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedAdvCmpltEventDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedAdvCmpltEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedAdvCmpltEventPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedAdvCmpltEventPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedAdvTrigOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedAdvTrigPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedAdvTrigPulseWidthUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'DigitalWidthUnits3',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedChangeDetectEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedChangeDetectEventPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedCtrOutEventOutputBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'ExportActions2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedCtrOutEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedCtrOutEventPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedCtrOutEventToggleIdleState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Level1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedDataActiveEventLvlActiveLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedDataActiveEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedDividedSampClkTimebaseOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedHshkEventDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedHshkEventInterlockedAssertOnStart': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedHshkEventInterlockedAssertedLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Level1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedHshkEventInterlockedDeassertDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedHshkEventOutputBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'ExportActions5',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedHshkEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedHshkEventPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedHshkEventPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedPauseTrigLvlActiveLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedPauseTrigOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedRdyForStartEventLvlActiveLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedRdyForStartEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedRdyForXferEventDeassertCond': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'DeassertCondition',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedRdyForXferEventDeassertCondCustomThreshold': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedRdyForXferEventLvlActiveLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedRdyForXferEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedRefTrigOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedRefTrigPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedSampClkDelayOffset': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedSampClkOutputBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'ExportActions3',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedSampClkOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedSampClkPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedSampClkTimebaseOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedSignalAttributeBool': {
        'cname': 'DAQmxSetExportedSignalAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'ExportSignalAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedSignalAttributeDouble': {
        'cname': 'DAQmxSetExportedSignalAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'ExportSignalAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedSignalAttributeInt32': {
        'cname': 'DAQmxSetExportedSignalAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'ExportSignalAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedSignalAttributeString': {
        'cname': 'DAQmxSetExportedSignalAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'ExportSignalAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedSignalAttributeUInt32': {
        'cname': 'DAQmxSetExportedSignalAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'ExportSignalAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedStartTrigOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedStartTrigPulsePolarity': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Polarity2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedSyncPulseEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetExportedWatchdogExpiredEventOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetFirstSampClkOffset': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetFirstSampClkTimescale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Timescale2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetFirstSampClkWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'CVIAbsoluteTime'
            }
        ],
        'returns': 'int32'
    },
    'SetFirstSampTimestampEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetFirstSampTimestampTimescale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Timescale2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetHshkDelayAfterXfer': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetHshkSampleInputDataWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'SampleInputDataWhen',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetHshkStartCond': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'HandshakeStartCondition',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetHshkTrigType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'TriggerType9',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetImplicitUnderflowBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'UnderflowBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetInterlockedHshkTrigAssertedLvl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Level1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetInterlockedHshkTrigSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetLoggingFilePath': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetLoggingFilePreallocationSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt64'
            }
        ],
        'returns': 'int32'
    },
    'SetLoggingFileWriteSize': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetLoggingMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'LoggingMode',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetLoggingPause': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetLoggingSampsPerFile': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt64'
            }
        ],
        'returns': 'int32'
    },
    'SetLoggingTDMSGroupName': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetLoggingTDMSOperation': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'LoggingOperation',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetMasterTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetMasterTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetOnDemandSimultaneousAOEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetPauseTrigType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'TriggerType6',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetPhysicalChanAIPowerControlEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetPhysicalChanAIPowerControlType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'SensorPowerType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetPhysicalChanAIPowerControlVoltage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetPhysicalChanAOManualControlEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetPhysicalChanName': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetPwrCurrentSetpoint': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetPwrIdleOutputBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'PowerIdleOutputBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetPwrOutputEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetPwrRemoteSense': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'Sense',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetPwrVoltageSetpoint': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'channel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetReadAttributeBool': {
        'cname': 'DAQmxSetReadAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'ReadAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetReadAttributeDouble': {
        'cname': 'DAQmxSetReadAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'ReadAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetReadAttributeInt32': {
        'cname': 'DAQmxSetReadAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'ReadAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetReadAttributeString': {
        'cname': 'DAQmxSetReadAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'ReadAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetReadAttributeUInt32': {
        'cname': 'DAQmxSetReadAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'ReadAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetReadAttributeUInt64': {
        'cname': 'DAQmxSetReadAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'ReadAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'uInt64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetReadAutoStart': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetReadChannelsToRead': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetReadOffset': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetReadOverWrite': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'OverwriteMode1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetReadReadAllAvailSamp': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetReadRelativeTo': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'ReadRelativeTo',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetReadSleepTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetReadWaitMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'WaitMode',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetRealTimeAttributeBool': {
        'cname': 'DAQmxSetRealTimeAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'RealTimeAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetRealTimeAttributeInt32': {
        'cname': 'DAQmxSetRealTimeAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'RealTimeAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetRealTimeAttributeUInt32': {
        'cname': 'DAQmxSetRealTimeAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'RealTimeAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetRealTimeConvLateErrorsToWarnings': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetRealTimeNumOfWarmupIters': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetRealTimeReportMissedSamp': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetRealTimeWaitForNextSampClkWaitMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'WaitMode3',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetRealTimeWriteRecoveryMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'WaitMode4',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetRefClkRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetRefClkSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetRefTrigAutoTrigEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetRefTrigDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetRefTrigMaxNumTrigsToDetect': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetRefTrigPretrigSamples': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetRefTrigRetriggerWin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetRefTrigRetriggerable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetRefTrigTimestampEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetRefTrigTimestampTimescale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Timescale2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetRefTrigTrigWin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetRefTrigType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'TriggerType8',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetSampClkActiveEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetSampClkDigFltrEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetSampClkDigFltrMinPulseWidth': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetSampClkDigFltrTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetSampClkDigFltrTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetSampClkDigSyncEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetSampClkOverrunBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'OverflowBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetSampClkRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetSampClkSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetSampClkTimebaseActiveEdge': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Edge1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetSampClkTimebaseDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetSampClkTimebaseMasterTimebaseDiv': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetSampClkTimebaseRate': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetSampClkTimebaseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetSampClkTimingResponseMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetSampClkUnderflowBehavior': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'UnderflowBehavior',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetSampClkWriteWfmUseInitialWfmDT': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetSampQuantSampMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'AcquisitionType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetSampQuantSampPerChan': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt64'
            }
        ],
        'returns': 'int32'
    },
    'SetSampTimingEngine': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetSampTimingType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'SampleTimingType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetScaleAttributeDouble': {
        'cname': 'DAQmxSetScaleAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'ScaleAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetScaleAttributeDoubleArray': {
        'cname': 'DAQmxSetScaleAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'ScaleAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'size': {
                    'mechanism': 'len',
                    'value': 'size'
                },
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetScaleAttributeInt32': {
        'cname': 'DAQmxSetScaleAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'ScaleAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetScaleAttributeString': {
        'cname': 'DAQmxSetScaleAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'ScaleAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetScaleDescr': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetScaleLinSlope': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetScaleLinYIntercept': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetScaleMapPreScaledMax': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetScaleMapPreScaledMin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetScaleMapScaledMax': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetScaleMapScaledMin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetScalePolyForwardCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetScalePolyReverseCoeff': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetScalePreScaledUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'UnitsPreScaled',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetScaleScaledUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetScaleTablePreScaledVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetScaleTableScaledVals': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'scaleName',
                'type': 'const char[]'
            },
            {
                'direction': 'out',
                'name': 'data',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'arraySizeInElements',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetStartTrigDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetStartTrigDelayUnits': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'DigitalWidthUnits1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetStartTrigMaxNumTrigsToDetect': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetStartTrigRetriggerWin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetStartTrigRetriggerable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetStartTrigTimescale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Timescale2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetStartTrigTimestampEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetStartTrigTimestampTimescale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Timescale2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetStartTrigTrigWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'CVIAbsoluteTime'
            }
        ],
        'returns': 'int32'
    },
    'SetStartTrigTrigWin': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetStartTrigType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'TriggerType10',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetSwitchChanAnlgBusSharingEnable': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'switchChannelName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetSwitchChanUsage': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'switchChannelName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'SwitchUsageTypes',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetSwitchDevAutoConnAnlgBus': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetSwitchDevPwrDownLatchRelaysAfterSettling': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetSwitchDevSettlingTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetSwitchScanBreakMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'BreakMode',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetSwitchScanRepeatMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'SwitchScanRepeatMode',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetSyncClkInterval': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetSyncPulseMinDelayToStart': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetSyncPulseResetDelay': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetSyncPulseSrc': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'const char'
            }
        ],
        'returns': 'int32'
    },
    'SetSyncPulseTimeTimescale': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'Timescale2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetSyncPulseTimeWhen': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'CVIAbsoluteTime'
            }
        ],
        'returns': 'int32'
    },
    'SetSyncPulseType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'SyncPulseType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetTimingAttributeBool': {
        'cname': 'DAQmxSetTimingAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetTimingAttributeDouble': {
        'cname': 'DAQmxSetTimingAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetTimingAttributeExBool': {
        'cname': 'DAQmxSetTimingAttributeEx',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetTimingAttributeExDouble': {
        'cname': 'DAQmxSetTimingAttributeEx',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetTimingAttributeExInt32': {
        'cname': 'DAQmxSetTimingAttributeEx',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetTimingAttributeExString': {
        'cname': 'DAQmxSetTimingAttributeEx',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetTimingAttributeExTimestamp': {
        'cname': 'DAQmxSetTimingAttributeEx',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'CVIAbsoluteTime'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetTimingAttributeExUInt32': {
        'cname': 'DAQmxSetTimingAttributeEx',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetTimingAttributeExUInt64': {
        'cname': 'DAQmxSetTimingAttributeEx',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'deviceNames',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'uInt64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetTimingAttributeInt32': {
        'cname': 'DAQmxSetTimingAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetTimingAttributeString': {
        'cname': 'DAQmxSetTimingAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetTimingAttributeTimestamp': {
        'cname': 'DAQmxSetTimingAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'CVIAbsoluteTime'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetTimingAttributeUInt32': {
        'cname': 'DAQmxSetTimingAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetTimingAttributeUInt64': {
        'cname': 'DAQmxSetTimingAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TimingAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'uInt64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetTrigAttributeBool': {
        'cname': 'DAQmxSetTrigAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TriggerAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetTrigAttributeDouble': {
        'cname': 'DAQmxSetTrigAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TriggerAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetTrigAttributeDoubleArray': {
        'cname': 'DAQmxSetTrigAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TriggerAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'size': {
                    'mechanism': 'len',
                    'value': 'size'
                },
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetTrigAttributeInt32': {
        'cname': 'DAQmxSetTrigAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TriggerAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetTrigAttributeInt32Array': {
        'cname': 'DAQmxSetTrigAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TriggerAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'size': {
                    'mechanism': 'len',
                    'value': 'size'
                },
                'type': 'const int32[]'
            },
            {
                'direction': 'in',
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetTrigAttributeString': {
        'cname': 'DAQmxSetTrigAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TriggerAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetTrigAttributeTimestamp': {
        'cname': 'DAQmxSetTrigAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TriggerAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'CVIAbsoluteTime'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetTrigAttributeUInt32': {
        'cname': 'DAQmxSetTrigAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'TriggerAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetTriggerSyncType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'SyncType',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetWatchdogAOExpirState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'lines',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetWatchdogAOOutputType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'lines',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'WatchdogAOExpirState',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetWatchdogAttributeBool': {
        'cname': 'DAQmxSetWatchdogAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'lines',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'WatchdogAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetWatchdogAttributeDouble': {
        'cname': 'DAQmxSetWatchdogAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'lines',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'WatchdogAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetWatchdogAttributeInt32': {
        'cname': 'DAQmxSetWatchdogAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'lines',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'WatchdogAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetWatchdogAttributeString': {
        'cname': 'DAQmxSetWatchdogAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'lines',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'grpc_type': 'WatchdogAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetWatchdogCOExpirState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'lines',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'WatchdogCOExpirState',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetWatchdogDOExpirState': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'lines',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'DigitalLineState',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetWatchdogExpirTrigTrigOnNetworkConnLoss': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'SetWatchdogExpirTrigType': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'TriggerType4',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetWatchdogTimeout': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetWriteAttributeBool': {
        'cname': 'DAQmxSetWriteAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'WriteAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetWriteAttributeDouble': {
        'cname': 'DAQmxSetWriteAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'WriteAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetWriteAttributeInt32': {
        'cname': 'DAQmxSetWriteAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'WriteAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetWriteAttributeString': {
        'cname': 'DAQmxSetWriteAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'WriteAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetWriteAttributeUInt32': {
        'cname': 'DAQmxSetWriteAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'WriteAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetWriteAttributeUInt64': {
        'cname': 'DAQmxSetWriteAttribute',
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'grpc_type': 'WriteAttribute',
                'name': 'attribute',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'uInt64'
            },
            {
                'direction': 'in',
                'hardcoded_value': '0U',
                'include_in_proto': False,
                'name': 'size',
                'type': 'uInt32'
            }
        ],
        'returns': 'int32'
    },
    'SetWriteOffset': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetWriteRegenMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'RegenerationMode1',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetWriteRelativeTo': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'WriteRelativeTo',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'SetWriteSleepTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'data',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'SetWriteWaitMode': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'WaitMode2',
                'name': 'data',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'StartNewFile': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'filePath',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'StartTask': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'StopTask': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            }
        ],
        'returns': 'int32'
    },
    'TaskControl': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'TaskControlAction',
                'name': 'action',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'TristateOutputTerm': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'outputTerminal',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'UnreserveNetworkDevice': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'deviceName',
                'type': 'const char[]'
            }
        ],
        'returns': 'int32'
    },
    'WaitForNextSampleClock': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'out',
                'name': 'isLate',
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'WaitForValidTimestamp': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'enum': 'TimestampEvent',
                'name': 'timestampEvent',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'out',
                'name': 'timestamp',
                'type': 'CVIAbsoluteTime'
            }
        ],
        'returns': 'int32'
    },
    'WaitUntilTaskDone': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'timeToWait',
                'type': 'float64'
            }
        ],
        'returns': 'int32'
    },
    'WriteAnalogF64': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'autoStart',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'dataLayout',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'writeArray',
                'type': 'const float64[]'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanWritten',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'WriteAnalogScalarF64': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'autoStart',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'WriteBinaryI16': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'autoStart',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'dataLayout',
                'type': 'int32'
            },
            {
                'coerced': True,
                'direction': 'in',
                'name': 'writeArray',
                'type': 'const int16[]'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanWritten',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'WriteBinaryI32': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'autoStart',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'dataLayout',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'writeArray',
                'type': 'const int32[]'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanWritten',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'WriteBinaryU16': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'autoStart',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'dataLayout',
                'type': 'int32'
            },
            {
                'coerced': True,
                'direction': 'in',
                'name': 'writeArray',
                'type': 'const uInt16[]'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanWritten',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'WriteBinaryU32': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'autoStart',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'dataLayout',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'writeArray',
                'type': 'const uInt32[]'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanWritten',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'WriteCtrFreq': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'autoStart',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'dataLayout',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'frequency',
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'name': 'dutyCycle',
                'type': 'const float64[]'
            },
            {
                'direction': 'out',
                'name': 'numSampsPerChanWritten',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'WriteCtrFreqScalar': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'autoStart',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'frequency',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'dutyCycle',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'WriteCtrTicks': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'autoStart',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'dataLayout',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'highTicks',
                'type': 'const uInt32[]'
            },
            {
                'direction': 'in',
                'name': 'lowTicks',
                'type': 'const uInt32[]'
            },
            {
                'direction': 'out',
                'name': 'numSampsPerChanWritten',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'WriteCtrTicksScalar': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'autoStart',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'highTicks',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'name': 'lowTicks',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'WriteCtrTime': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'autoStart',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'dataLayout',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'highTime',
                'type': 'const float64[]'
            },
            {
                'direction': 'in',
                'name': 'lowTime',
                'type': 'const float64[]'
            },
            {
                'direction': 'out',
                'name': 'numSampsPerChanWritten',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'WriteCtrTimeScalar': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'autoStart',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'highTime',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'lowTime',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'WriteDigitalLines': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'autoStart',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'dataLayout',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'writeArray',
                'type': 'const uInt8[]'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanWritten',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'WriteDigitalScalarU32': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'autoStart',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'value',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'WriteDigitalU16': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'autoStart',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'dataLayout',
                'type': 'int32'
            },
            {
                'coerced': True,
                'direction': 'in',
                'name': 'writeArray',
                'type': 'const uInt16[]'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanWritten',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'WriteDigitalU32': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'autoStart',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'dataLayout',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'writeArray',
                'type': 'const uInt32[]'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanWritten',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'WriteDigitalU8': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSampsPerChan',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'autoStart',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'enum': 'GroupBy',
                'name': 'dataLayout',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'writeArray',
                'type': 'const uInt8[]'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanWritten',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'WriteRaw': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'task',
                'type': 'TaskHandle'
            },
            {
                'direction': 'in',
                'name': 'numSamps',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'name': 'autoStart',
                'type': 'bool32'
            },
            {
                'direction': 'in',
                'name': 'timeout',
                'type': 'float64'
            },
            {
                'direction': 'in',
                'name': 'writeArray',
                'type': 'const uInt8[]'
            },
            {
                'direction': 'out',
                'name': 'sampsPerChanWritten',
                'type': 'int32'
            },
            {
                'direction': 'in',
                'hardcoded_value': 'nullptr',
                'include_in_proto': False,
                'name': 'reserved',
                'pointer': True,
                'type': 'bool32'
            }
        ],
        'returns': 'int32'
    },
    'WriteToTEDSFromArray': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'bitStream',
                'size': {
                    'mechanism': 'len',
                    'value': 'arraySize'
                },
                'type': 'const uInt8[]'
            },
            {
                'direction': 'in',
                'name': 'arraySize',
                'type': 'uInt32'
            },
            {
                'direction': 'in',
                'enum': 'WriteBasicTEDSOptions',
                'name': 'basicTEDSOptions',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    },
    'WriteToTEDSFromFile': {
        'parameters': [
            {
                'direction': 'in',
                'name': 'physicalChannel',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'name': 'filePath',
                'type': 'const char[]'
            },
            {
                'direction': 'in',
                'enum': 'WriteBasicTEDSOptions',
                'name': 'basicTEDSOptions',
                'type': 'int32'
            }
        ],
        'returns': 'int32'
    }
}
